{
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [],
   "ParameterLabels": {}
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This template deploys the app and demo databases (if applicable)",
  "LastUpdated": "May 19, 2024",
  "Version": "v1.9"
 },
 "Outputs": {
  "AppDbAdminSecretArn": {
   "Condition": "",
   "Export": {
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "AppDbAdminSecretArn"
      ]
     ]
    }
   },
   "Value": {
    "Ref": "AppDbAdminSecret"
   }
  },
  "AppDbClusterArn": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppCluster",
     "DBClusterArn"
    ]
   }
  },
  "AppDbClusterIdentifier": {
   "Condition": "",
   "Export": {
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "AppDbClusterIdentifier"
      ]
     ]
    }
   },
   "Value": {
    "Ref": "AppCluster"
   }
  },
  "AppDbClusterReaderEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppCluster",
     "ReadEndpoint.Address"
    ]
   }
  },
  "AppDbClusterWriterEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppCluster",
     "Endpoint.Address"
    ]
   }
  },
  "AppDbInstance1Endpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppInstance1",
     "Endpoint.Address"
    ]
   }
  },
  "AppDbInstance2Endpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppInstance2",
     "Endpoint.Address"
    ]
   }
  },
  "AppDbProxyArn": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppDbProxy",
     "DBProxyArn"
    ]
   }
  },
  "AppDbProxyName": {
   "Condition": "",
   "Export": {
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "AppDbProxyName"
      ]
     ]
    }
   },
   "Value": {
    "Ref": "AppDbProxy"
   }
  },
  "AppDbProxyPort": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppCluster",
     "Endpoint.Port"
    ]
   }
  },
  "AppDbProxyReaderEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppDbProxyReaderEndpoint",
     "Endpoint"
    ]
   }
  },
  "AppDbProxyWriterEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "AppDbProxy",
     "Endpoint"
    ]
   }
  },
  "DemoDbAdminSecretArn": {
   "Condition": "",
   "Export": {
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "DemoDbAdminSecretArn"
      ]
     ]
    }
   },
   "Value": {
    "Ref": "DemoDbAdminSecret"
   }
  },
  "DemoDbClusterArn": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "DemoCluster",
     "DBClusterArn"
    ]
   }
  },
  "DemoDbClusterIdentifier": {
   "Condition": "",
   "Export": {
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "DemoDbClusterIdentifier"
      ]
     ]
    }
   },
   "Value": {
    "Ref": "DemoCluster"
   }
  },
  "DemoDbClusterReaderEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "DemoCluster",
     "ReadEndpoint.Address"
    ]
   }
  },
  "DemoDbClusterWriterEndpoint": {
   "Condition": "",
   "Value": {
    "Fn::GetAtt": [
     "DemoCluster",
     "Endpoint.Address"
    ]
   }
  },
  "KmsKeyArn": {
   "Condition": "",
   "Export": {
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "KmsKeyArn"
      ]
     ]
    }
   },
   "Value": {
    "Fn::GetAtt": [
     "KMSKey",
     "Arn"
    ]
   }
  }
 },
 "Parameters": {
  "CodeDownloadUrl": {
   "Default": "https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DatabaseAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DatabaseAdminUsername": {
   "Default": "AuroraAdmin",
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "DemoDashboardUserEmail": {
   "Description": "The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".",
   "Type": "String"
  },
  "DeployDemoDashboard": {
   "AllowedValues": [
    "No",
    "Yes"
   ],
   "Default": "Yes",
   "Description": "Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed to us-east-1, regardless of which region you deploy this stack to.",
   "Type": "String"
  },
  "GitHubGhSessionValue": {
   "Description": "The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "GitHubUserSessionValue": {
   "Description": "The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "LambdaLayerArn": {
   "Type": "String"
  },
  "MainStackName": {
   "Type": "String"
  },
  "PrivateSubnetZoneACidr": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrivateSubnetZoneBCidr": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneACidr": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneBCidr": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "RegionalWafAclArn": {
   "Type": "String"
  },
  "VpcCidr": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  }
 },
 "Resources": {
  "AppCluster": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "DbSubnetGroup"
   ],
   "Properties": {
    "BackupRetentionPeriod": 30,
    "DBSubnetGroupName": {
     "Ref": "DbSubnetGroup"
    },
    "DeletionProtection": false,
    "EnableIAMDatabaseAuthentication": false,
    "Engine": "aurora-postgresql",
    "EngineMode": "provisioned",
    "EngineVersion": "14.7",
    "KmsKeyId": {
     "Ref": "KMSKey"
    },
    "MasterUserPassword": {
     "Ref": "DatabaseAdminPassword"
    },
    "MasterUsername": {
     "Ref": "DatabaseAdminUsername"
    },
    "Port": 5432,
    "StorageEncrypted": true,
    "VpcSecurityGroupIds": [
     {
      "Ref": "DbClusterSecurityGroup"
     }
    ]
   },
   "Type": "AWS::RDS::DBCluster"
  },
  "AppDatabasePreparerResource": {
   "DependsOn": [
    "DatabasePreparerLogGroup",
    "AppInstance1",
    "AppInstance2",
    "AppDbAdminSecret"
   ],
   "Properties": {
    "Properties": {
     "DatabaseHost": {
      "Fn::GetAtt": [
       "AppDbProxy",
       "Endpoint"
      ]
     },
     "DatabaseIdentifier": "App",
     "QueriesToExecute": [
      "\n                CREATE SEQUENCE IF NOT EXISTS data_sequence start 1 increment 1;\n                ",
      "\n                CREATE TABLE IF NOT EXISTS dataserver (\n                    id integer not null primary key default nextval('data_sequence'),\n                    guid VARCHAR(255) NOT NULL,\n                    insertedon timestamp NOT NULL DEFAULT NOW(),\n                    migratedon timestamp NOT NULL DEFAULT NOW()\n                );\n                "
     ]
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "DatabasePreparer",
      "Arn"
     ]
    },
    "Type": "Custom::ExecuteQueriesAgainstDatabase",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "AppDbAdminSecret": {
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Cluster Admin Account for ",
       {
        "Ref": "MainStackName"
       }
      ]
     ]
    },
    "KmsKeyId": {
     "Ref": "KMSKey"
    },
    "SecretString": {
     "Fn::Join": [
      "",
      [
       "{\"username\": \"",
       {
        "Ref": "DatabaseAdminUsername"
       },
       "\", \"password\": \"",
       {
        "Ref": "DatabaseAdminPassword"
       },
       "\", \"database\": \"template1\"}"
      ]
     ]
    }
   },
   "Type": "AWS::SecretsManager::Secret"
  },
  "AppDbAdminSecretArnParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Admin Secret ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbAdminSecretArn"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "AppDbAdminSecret"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbAdminSecretAttachment": {
   "DependsOn": [
    "AppDbAdminSecret",
    "AppCluster"
   ],
   "Properties": {
    "SecretId": {
     "Ref": "AppDbAdminSecret"
    },
    "TargetId": {
     "Ref": "AppCluster"
    },
    "TargetType": "AWS::RDS::DBCluster"
   },
   "Type": "AWS::SecretsManager::SecretTargetAttachment"
  },
  "AppDbClusterArnParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional App DB Cluster ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbClusterArn"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppCluster",
      "DBClusterArn"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbClusterIdentifierParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional App DB Cluster Identifier for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbClusterIdentifier"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "AppCluster"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbClusterReaderEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Cluster Reader Endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbClusterReaderEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppCluster",
      "ReadEndpoint.Address"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbClusterWriterEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Cluster Writer Endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbClusterWriterEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppCluster",
      "Endpoint.Address"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbInstance1EndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Instance 1 Endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbInstance1Endpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppInstance1",
      "Endpoint.Address"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbInstance2EndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Instance 2 Endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbInstance2Endpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppInstance2",
      "Endpoint.Address"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbProxy": {
   "Properties": {
    "Auth": [
     {
      "SecretArn": {
       "Ref": "AppDbAdminSecret"
      }
     }
    ],
    "DBProxyName": {
     "Ref": "AppCluster"
    },
    "EngineFamily": "POSTGRESQL",
    "RequireTLS": true,
    "RoleArn": {
     "Fn::GetAtt": [
      "DbProxyRole",
      "Arn"
     ]
    },
    "VpcSecurityGroupIds": [
     {
      "Ref": "DbProxySecurityGroup"
     }
    ],
    "VpcSubnetIds": [
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrivateSubnetZoneAId}}"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrivateSubnetZoneBId}}"
       ]
      ]
     }
    ]
   },
   "Type": "AWS::RDS::DBProxy"
  },
  "AppDbProxyArnParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbProxyArn"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppDbProxy",
      "DBProxyArn"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbProxyNameParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "App DB Proxy name for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbProxyName"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "AppDbProxy"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbProxyPortParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy port for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbProxyPort"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppCluster",
      "Endpoint.Port"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbProxyReaderEndpoint": {
   "DependsOn": [
    "AppDbProxy"
   ],
   "Properties": {
    "DBProxyEndpointName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "MainStackName"
       },
       "app",
       "reader"
      ]
     ]
    },
    "DBProxyName": {
     "Ref": "AppDbProxy"
    },
    "TargetRole": "READ_ONLY",
    "VpcSecurityGroupIds": [
     {
      "Ref": "DbProxySecurityGroup"
     }
    ],
    "VpcSubnetIds": [
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrivateSubnetZoneAId}}"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/PrivateSubnetZoneBId}}"
       ]
      ]
     }
    ]
   },
   "Type": "AWS::RDS::DBProxyEndpoint"
  },
  "AppDbProxyReaderEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy reader endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbProxyReaderEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppDbProxyReaderEndpoint",
      "Endpoint"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppDbProxyTargetGroup": {
   "DependsOn": [
    "AppDbProxy",
    "AppInstance1"
   ],
   "Properties": {
    "DBClusterIdentifiers": [
     {
      "Ref": "AppCluster"
     }
    ],
    "DBProxyName": {
     "Ref": "AppDbProxy"
    },
    "TargetGroupName": "default"
   },
   "Type": "AWS::RDS::DBProxyTargetGroup"
  },
  "AppDbProxyWriterEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "RDS Proxy writer endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "AppDbProxyWriterEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "AppDbProxy",
      "Endpoint"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "AppInstance1": {
   "DependsOn": [
    "DbSubnetGroup",
    "AppCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "CACertificateIdentifier": "rds-ca-rsa4096-g1",
    "DBClusterIdentifier": {
     "Ref": "AppCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "AppInstance2": {
   "DependsOn": [
    "DbSubnetGroup",
    "AppCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "CACertificateIdentifier": "rds-ca-rsa4096-g1",
    "DBClusterIdentifier": {
     "Ref": "AppCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "ClusterParameterGroup": {
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       " - Cluster Param Group"
      ]
     ]
    },
    "Family": "aurora-postgresql13",
    "Parameters": {
     "rds.logical_replication": 1,
     "wal_sender_timeout": 240000
    }
   },
   "Type": "AWS::RDS::DBClusterParameterGroup"
  },
  "DatabasePreparer": {
   "DependsOn": [
    "DatabasePreparerRole",
    "AppDbAdminSecret",
    "DemoDbAdminSecret"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport subprocess\nsubprocess.call('pip install urllib3<2 -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL) # nosec Not subject to user input\nsys.path.insert(1, '/tmp/') # nosec Required for package inclusion\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport cfnresponse\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\n'''\n    RDSAdminSecretArn\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    if 'Properties' in event['ResourceProperties']:\n        arguments = event['ResourceProperties']['Properties']\n        \n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        db_credentials = custom_functions.get_db_credentials(arguments['DatabaseIdentifier'])\n        \n        try:\n                \n            db_conn = psycopg2.connect(\n                host = db_credentials['host'],\n                port = db_credentials['port'],\n                user = db_credentials['username'],\n                password = db_credentials['password'],\n                database = db_credentials['database'],\n                connect_timeout = 3,\n                sslmode = 'require',\n            )\n            \n            curs = db_conn.cursor()\n            \n            for query in arguments['QueriesToExecute']:\n                \n                # nosemgrep - Not subject to user input\n                curs.execute(query.replace('\\r','').replace('\\n',' '))\n                db_conn.commit()\n            \n            curs.close()\n            db_conn.close()\n        \n        except Exception as error:\n\n            print('There was a problem executing the DDL statements: ' + str(error))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "Executes DDL statements against new DB clusters to create necessary schema",
    "Environment": {
     "Variables": {
      "APP_DB_SECRET_ARN": {
       "Ref": "AppDbAdminSecret"
      },
      "DEMO_DB_SECRET_ARN": {
       "Ref": "DemoDbAdminSecret"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "DatabasePreparerRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "DatabasePreparerLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "DatabasePreparer"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "DatabasePreparer"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "DatabasePreparerRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Ref": "AppDbAdminSecret"
          },
          {
           "Ref": "DemoDbAdminSecret"
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "KMSKey",
            "Arn"
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "database-secret-retrieval"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "DbClusterSecurityGroup": {
   "DependsOn": [
    "DbProxySecurityGroup"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W5",
       "reason": "Access to dynamic public IPs is required."
      }
     ]
    }
   },
   "Properties": {
    "GroupDescription": "RDS Security Group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "HTTPS to RDS Service",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "SecurityGroupIngress": [
     {
      "Description": "DB Access from In-Region Lambda Functions",
      "FromPort": 5432,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      },
      "ToPort": 5432
     },
     {
      "Description": "DB Access from In-Region RDS Proxy",
      "FromPort": 5432,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Ref": "DbProxySecurityGroup"
      },
      "ToPort": 5432
     }
    ],
    "VpcId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/VpcId}}"
      ]
     ]
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "DbProxyRole": {
   "DependsOn": [
    "KMSKey",
    "AppDbAdminSecret"
   ],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "rds.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "KMSKey",
            "Arn"
           ]
          }
         ]
        },
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Ref": "AppDbAdminSecret"
          }
         ]
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "DbProxySecurityGroup": {
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W5",
       "reason": "Access to dynamic public IPs is required."
      }
     ]
    }
   },
   "Properties": {
    "GroupDescription": "RDS Proxy Security Group",
    "SecurityGroupEgress": [],
    "SecurityGroupIngress": [
     {
      "Description": "DB Access from Lambda",
      "FromPort": 5432,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      },
      "ToPort": 5432
     }
    ],
    "VpcId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/VpcId}}"
      ]
     ]
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "DbProxySecurityGroupEgressToDB": {
   "DependsOn": [
    "DbProxySecurityGroup",
    "DbClusterSecurityGroup"
   ],
   "Properties": {
    "Description": "TCP Traffic to Source DB",
    "DestinationSecurityGroupId": {
     "Ref": "DbClusterSecurityGroup"
    },
    "FromPort": 5432,
    "GroupId": {
     "Ref": "DbProxySecurityGroup"
    },
    "IpProtocol": "tcp",
    "ToPort": 5432
   },
   "Type": "AWS::EC2::SecurityGroupEgress"
  },
  "DbSubnetGroup": {
   "Properties": {
    "DBSubnetGroupDescription": "Private Database Subnets",
    "DBSubnetGroupName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       {
        "Fn::Join": [
         "",
         {
          "Fn::Split": [
           "subnet-",
           {
            "Fn::Join": [
             "-",
             [
              {
               "Fn::Join": [
                "",
                [
                 "{{resolve:ssm:/",
                 {
                  "Ref": "MainStackName"
                 },
                 "/",
                 "Private",
                 "SubnetZoneAId}}"
                ]
               ]
              },
              {
               "Fn::Join": [
                "",
                [
                 "{{resolve:ssm:/",
                 {
                  "Ref": "MainStackName"
                 },
                 "/",
                 "Private",
                 "SubnetZoneAId}}"
                ]
               ]
              }
             ]
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "SubnetIds": [
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/",
        "Private",
        "SubnetZoneAId}}"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "{{resolve:ssm:/",
        {
         "Ref": "MainStackName"
        },
        "/",
        "Private",
        "SubnetZoneBId}}"
       ]
      ]
     }
    ]
   },
   "Type": "AWS::RDS::DBSubnetGroup"
  },
  "DemoCluster": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "DbSubnetGroup"
   ],
   "Properties": {
    "BackupRetentionPeriod": 30,
    "DBSubnetGroupName": {
     "Ref": "DbSubnetGroup"
    },
    "DeletionProtection": false,
    "EnableIAMDatabaseAuthentication": false,
    "Engine": "aurora-postgresql",
    "EngineMode": "provisioned",
    "EngineVersion": "14.7",
    "KmsKeyId": {
     "Ref": "KMSKey"
    },
    "MasterUserPassword": {
     "Ref": "DatabaseAdminPassword"
    },
    "MasterUsername": {
     "Ref": "DatabaseAdminUsername"
    },
    "Port": 5432,
    "StorageEncrypted": true,
    "VpcSecurityGroupIds": [
     {
      "Ref": "DbClusterSecurityGroup"
     }
    ]
   },
   "Type": "AWS::RDS::DBCluster"
  },
  "DemoDatabasePreparerResource": {
   "DependsOn": [
    "DatabasePreparerLogGroup",
    "DemoInstance1",
    "DemoInstance2",
    "DemoDbAdminSecret"
   ],
   "Properties": {
    "Properties": {
     "DatabaseHost": "",
     "DatabaseIdentifier": "Demo",
     "QueriesToExecute": [
      "\n                CREATE TABLE IF NOT EXISTS dataclient (\n                    guid character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n                    primary_region integer NOT NULL,\n                    failover_region integer NOT NULL,\n                    http_code integer,\n                    insertedon time without time zone\n                );\n                ",
      "\n                CREATE TABLE IF NOT EXISTS failoverevents (\n                    event integer NOT NULL,\n                    insertedon timestamp without time zone NOT NULL\n                );\n                "
     ]
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "DatabasePreparer",
      "Arn"
     ]
    },
    "Type": "Custom::ExecuteQueriesAgainstDatabase",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "DemoDbAdminSecret": {
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Demo DB Cluster Admin Account for ",
       {
        "Ref": "MainStackName"
       }
      ]
     ]
    },
    "KmsKeyId": {
     "Ref": "KMSKey"
    },
    "SecretString": {
     "Fn::Join": [
      "",
      [
       "{\"username\": \"",
       {
        "Ref": "DatabaseAdminUsername"
       },
       "\", \"password\": \"",
       {
        "Ref": "DatabaseAdminPassword"
       },
       "\", \"database\": \"template1\"}"
      ]
     ]
    }
   },
   "Type": "AWS::SecretsManager::Secret"
  },
  "DemoDbAdminSecretArnParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Demo DB Admin Secret ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "DemoDbAdminSecretArn"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "DemoDbAdminSecret"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "DemoDbAdminSecretAttachment": {
   "DependsOn": [
    "DemoDbAdminSecret",
    "DemoCluster"
   ],
   "Properties": {
    "SecretId": {
     "Ref": "DemoDbAdminSecret"
    },
    "TargetId": {
     "Ref": "DemoCluster"
    },
    "TargetType": "AWS::RDS::DBCluster"
   },
   "Type": "AWS::SecretsManager::SecretTargetAttachment"
  },
  "DemoDbClusterArnParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional Demo DB Cluster ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "DemoDbClusterArn"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "DemoCluster",
      "DBClusterArn"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "DemoDbClusterIdentifierParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional Demo DB Cluster Identifier for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "DemoDbClusterIdentifier"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Ref": "DemoCluster"
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "DemoDbClusterReaderEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Demo DB Cluster Reader Endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "DemoDbClusterReaderEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "DemoCluster",
      "ReadEndpoint.Address"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "DemoDbClusterWriterEndpointParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Demo DB Cluster Writer Endpoint for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "DemoDbClusterWriterEndpoint"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "DemoCluster",
      "Endpoint.Address"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  },
  "DemoInstance1": {
   "DependsOn": [
    "DbSubnetGroup",
    "DemoCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "CACertificateIdentifier": "rds-ca-rsa4096-g1",
    "DBClusterIdentifier": {
     "Ref": "DemoCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "DemoInstance2": {
   "DependsOn": [
    "DbSubnetGroup",
    "DemoCluster"
   ],
   "Properties": {
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "CACertificateIdentifier": "rds-ca-rsa4096-g1",
    "DBClusterIdentifier": {
     "Ref": "DemoCluster"
    },
    "DBInstanceClass": "db.r6g.large",
    "EnablePerformanceInsights": false,
    "Engine": "aurora-postgresql",
    "MultiAZ": false,
    "PubliclyAccessible": false
   },
   "Type": "AWS::RDS::DBInstance"
  },
  "KMSKey": {
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Muli-Region KMS Key for ",
       {
        "Ref": "AWS::StackName"
       }
      ]
     ]
    },
    "EnableKeyRotation": true,
    "Enabled": true,
    "KeyPolicy": {
     "Id": "default-key-policy",
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:aws:iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*",
       "Sid": "Enable IAM User Permissions"
      }
     ],
     "Version": "2012-10-17"
    },
    "MultiRegion": true
   },
   "Type": "AWS::KMS::Key"
  },
  "KmsKeyArnParam": {
   "Condition": "",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Regional KMS Key ARN for ",
       {
        "Ref": "AWS::StackName"
       },
       " stack"
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "/",
       {
        "Ref": "MainStackName"
       },
       "/",
       "KmsKeyArn"
      ]
     ]
    },
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::GetAtt": [
      "KMSKey",
      "Arn"
     ]
    }
   },
   "Type": "AWS::SSM::Parameter"
  }
 },
 "Transform": {
  "Name": "AWS::SecretsManager-2020-07-23"
 }
}