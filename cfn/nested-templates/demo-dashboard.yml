Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: []
    ParameterLabels: {}
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This template deploys the demo CloudFront Distrubtion and dashboard
  LastUpdated: April 03, 2024
  Version: v1.7
Outputs:
  CloudFrontCdnWebsiteExport:
    Export:
      Name: !Join
        - ''
        - - !Ref 'MainStackName'
          - -DashboardWebsite
    Value: !GetAtt 'Authentication.Outputs.WebsiteUrl'
Parameters:
  CodeDownloadUrl:
    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
    Type: String
  DatabaseAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DatabaseAdminUsername:
    Default: AuroraAdmin
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  DemoDashboardUserEmail:
    Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
    Type: String
  DeployDemoDashboard:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: >-
      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
      to us-east-1, regardless of which region you deploy this stack to.
    Type: String
  GitHubGhSessionValue:
    Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
    Type: String
  GitHubUserSessionValue:
    Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
    Type: String
  LambdaLayerArn:
    Type: String
  MainStackName:
    Type: String
  PrivateSubnetZoneACidr:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrivateSubnetZoneBCidr:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PublicSubnetZoneACidr:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PublicSubnetZoneBCidr:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  RegionalWafAclArn:
    Type: String
  VpcCidr:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
Resources:
  Authentication:
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:520945424137:applications/cloudfront-authorization-at-edge
        SemanticVersion: 2.1.8
      Parameters:
        CreateCloudFrontDistribution: true
        DefaultRootObject: index.html
        EmailAddress: !Ref 'DemoDashboardUserEmail'
        HttpHeaders: >-
          {"Strict-Transport-Security": "max-age=31536000; includeSubdomains; preload", "Referrer-Policy": "same-origin", "X-XSS-Protection": "1; mode=block", "X-Frame-Options": "DENY", "X-Content-Type-Options":
          "nosniff"}
    Type: AWS::Serverless::Application
  DashboardCodeDeployer:
    DependsOn: []
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: This function run once to set up the environment, and is invoked before the VPC is provisioned.
          - id: W84
            reason: These logs do not contain sensitive data.
          - id: W92
            reason: This function is used to support the demo environment and does not require provisioned concurrency.
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys,subprocess\nsubprocess.call('pip install urllib3<2 cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\nsys.path.insert(1,'/tmp/')\n\
          import os,json,glob,boto3,shutil,urllib3,zipfile,mimetypes,cfnresponse\nfrom collections import defaultdict\nfrom botocore.exceptions import ClientError as boto3_client_error\nhttp=urllib3.PoolManager()\n\
          try:from urllib2 import HTTPError,build_opener,HTTPHandler,Request\nexcept ImportError:from urllib.error import HTTPError;from urllib.request import build_opener,HTTPHandler,Request\n'\\n    -\
          \ CodeBucketName | str\\n    - CodeDownloadUrl | str\\n    - DemoAppApiKeyId | str\\n'\ndef handler(event,context):\n\tW='VersionId';V='Key';U='RequestType';N='CodeBucketName';M=True;C=context;A=event;print(json.dumps(A));E=A['ResourceProperties']['Properties'];G=boto3.client('s3');D={}\n\
          \tif A[U]in['Create','Update']:\n\t\tH='/tmp/demo_ui_code.zip';O=H.replace('.zip','');'\\n            Download the codebase\\n        ';X=urllib3.PoolManager();I=X.request('GET',E['CodeDownloadUrl'],preload_content=False,headers={'Cookie':'_gh_sess={};\
          \ user_session={}'.format(os.environ['GITHUB_GH_SESSION_COOKIE'],os.environ['GITHUB_USER_SESSION_COOKIE'])})\n\t\tif I.status!=200:print('Failed to Download Demo UI Code: HTTP Code '+str(I.status));return\
          \ cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\t\twith I as Y,open(H,'wb')as Z:shutil.copyfileobj(Y,Z)\n\t\t'\\n            Unzip the downloaded code\\n        '\n\t\twith zipfile.ZipFile(H,'r')as\
          \ a:a.extractall(O)\n\t\tP='/demo/dashboard-ui/'\n\t\ttry:b=boto3.client('apigateway').get_api_key(apiKey=E['DemoAppApiKeyId'],includeValue=M);c=b['value']\n\t\texcept boto3_client_error as F:print('Failed\
          \ to Retrieve API Key: '+str(F));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\t\t'\\n            For each file in the local code directory\\n        '\n\t\tfor B in glob.iglob(O+'**/**',recursive=M):\n\
          \t\t\t\"\\n                If it's one of the dashboard files and it's a file, not a directory, we'll upload it to S3\\n            \"\n\t\t\tif P in B and os.path.isfile(B):\n\t\t\t\t\"\\n  \
          \                  If it's the index file, we need to add the API key to authenticate Demo API requests.\\n                \"\n\t\t\t\tif B[-10:]=='index.html':\n\t\t\t\t\twith open(B,'r')as J:K=J.read()\n\
          \t\t\t\t\tK=K.replace('{{DEMO-API-KEY}}',c)\n\t\t\t\t\twith open(B,'w')as J:J.write(K)\n\t\t\t\t\tprint('Added API Key to Demo UI Index File: '+B)\n\t\t\t\ttry:d=B.split(P)[1];G.upload_file(B,E[N],d,ExtraArgs={'ContentType':mimetypes.guess_type(B)[0]})\n\
          \t\t\t\texcept boto3_client_error as F:print('Failed to Upload Dashboard File: '+str(F));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\telif A[U]in['Delete']:\n\t\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,D);\"\
          \\n            Here, we'll delete all objects, versions, and delete markers from the bucket.\\n        \";e=G.get_paginator('list_object_versions');L=[]\n\t\tfor Q in e.paginate(Bucket=E[N]):\n\
          \t\t\tfor R in['Versions','DeleteMarkers']:\n\t\t\t\tif R in Q:\n\t\t\t\t\tfor S in Q[R]:L.append({V:S[V],W:S[W]})\n\t\tfor T in range(0,len(L),1000):\n\t\t\ttry:f=G.delete_objects(Bucket=E[N],Delete={'Objects':L[T:T+1000],'Quiet':M})\n\
          \t\t\texcept boto3_client_error as F:print('Failed to Delete S3 Objects: '+str(F));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,D)"
      Description: Downloads dashboard code from a remote repo and deploys it to Amazon S3
      Environment:
        Variables:
          CODE_BUCKET_NAME: !GetAtt 'Authentication.Outputs.S3Bucket'
          CODE_DOWNLOAD_URL: !Ref 'CodeDownloadUrl'
          GITHUB_GH_SESSION_COOKIE: !Ref 'GitHubGhSessionValue'
          GITHUB_USER_SESSION_COOKIE: !Ref 'GitHubUserSessionValue'
      Handler: index.handler
      Layers:
        - !Ref 'LambdaLayerArn'
      MemorySize: 128
      Role: !GetAtt 'DashboardCodeDeployerRole.Arn'
      Runtime: python3.9
      Timeout: 30
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  DashboardCodeDeployerLogGroup:
    DeletionPolicy: Delete
    DependsOn:
      - DashboardCodeDeployer
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'DashboardCodeDeployer'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  DashboardCodeDeployerResource:
    DependsOn:
      - Authentication
      - DashboardCodeDeployer
      - DashboardCodeDeployerLogGroup
    Properties:
      Properties:
        CodeBucketName: !GetAtt 'Authentication.Outputs.S3Bucket'
        CodeDownloadUrl: !Ref 'CodeDownloadUrl'
        DemoAppApiKeyId: !Join
          - ''
          - - '{{resolve:ssm:/'
            - !Ref 'MainStackName'
            - /DemoAppApiKeyId}}
        Version: '1.13'
      ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'
      Type: Custom::DeployDashboardCode
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  DashboardCodeDeployerRole:
    DependsOn: []
    Metadata: {}
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !GetAtt 'Authentication.Outputs.S3Bucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !GetAtt 'Authentication.Outputs.S3Bucket'
                      - /*
                Sid: PutS3Objects
              - Action:
                  - apigateway:GET
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:apigateway:'
                      - !Ref 'AWS::Region'
                      - ::/apikeys/
                      - !Join
                        - ''
                        - - '{{resolve:ssm:/'
                          - !Ref 'MainStackName'
                          - /DemoAppApiKeyId}}
                Sid: GetApiKey
          PolicyName: main-policy
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
