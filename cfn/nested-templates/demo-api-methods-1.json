{
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [],
   "ParameterLabels": {}
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This template provisions the demo API methods and handlers",
  "LastUpdated": "April 03, 2024",
  "Version": "v1.7"
 },
 "Parameters": {
  "CodeDownloadUrl": {
   "Default": "https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DatabaseAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DatabaseAdminUsername": {
   "Default": "AuroraAdmin",
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "DemoDashboardUserEmail": {
   "Description": "The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".",
   "Type": "String"
  },
  "DeployDemoDashboard": {
   "AllowedValues": [
    "No",
    "Yes"
   ],
   "Default": "Yes",
   "Description": "Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed to us-east-1, regardless of which region you deploy this stack to.",
   "Type": "String"
  },
  "GitHubGhSessionValue": {
   "Description": "The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "GitHubUserSessionValue": {
   "Description": "The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "LambdaLayerArn": {
   "Type": "String"
  },
  "MainStackName": {
   "Type": "String"
  },
  "PrivateSubnetZoneACidr": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrivateSubnetZoneBCidr": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneACidr": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneBCidr": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "RegionalWafAclArn": {
   "Type": "String"
  },
  "VpcCidr": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  }
 },
 "Resources": {
  "CalculateRecoveryTime": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\nimport multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        SELECT\n            DATE_PART('second', max(insertedon)::time - min(insertedon)::time) AS rto\n        FROM dataclient \n        WHERE http_code = 500 \n        GROUP BY http_code\n    ''');\n    \n    client_events = curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n    records_to_return = []\n    \n    for client_event in client_events:\n    \n        c = 0\n        temp2 = {}\n        \n        for col in curs.description:\n            \n            temp2.update({str(col[0]): client_event[c]})\n            c += 1\n        \n        records_to_return.append(temp2)\n    \n    return {\n        'code': 200,\n        'body': json.dumps(records_to_return, default = str),\n    }"
    },
    "Description": "Retrieves the resolved RTO",
    "Environment": {
     "Variables": {
      "DEMO_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbAdminSecretArn}}"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "CalculateRecoveryTimeRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "CalculateRecoveryTimeLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "CalculateRecoveryTime"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "CalculateRecoveryTime"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "CalculateRecoveryTimeMethod": {
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W59",
       "reason": "This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "$input.path('$.body')"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\" #if($foreach.hasNext),#end #end }\n}"
     },
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "CalculateRecoveryTime",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "OperationName": "getRecoveryTime",
    "ResourceId": {
     "Ref": "CalculateRecoveryTimeResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "CalculateRecoveryTimeMethodInvocationPermission": {
   "DependsOn": [
    "CalculateRecoveryTime"
   ],
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CalculateRecoveryTime",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Fn::Join": [
         "",
         [
          "{{resolve:ssm:/",
          {
           "Ref": "MainStackName"
          },
          "/DemoAppApiId}}"
         ]
        ]
       },
       "/*/",
       "GET",
       "/",
       "calculate-recovery-time"
      ]
     ]
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "CalculateRecoveryTimeResource": {
   "Condition": "",
   "DependsOn": [],
   "Properties": {
    "ParentId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/ApiRootResourceId}}"
      ]
     ]
    },
    "PathPart": "calculate-recovery-time",
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Resource"
  },
  "CalculateRecoveryTimeResourceOptionsMethod": {
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "{}"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "{\"statusCode\": 200}"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "CalculateRecoveryTimeResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "CalculateRecoveryTimeRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbAdminSecretArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/DemoDbAdminSecretArn}}"
            ]
           ]
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/KmsKeyArn}}"
            ]
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "database-secret-retrieval"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "GetClientTraffic": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\t\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\t\nfrom datetime import timedelta\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n    \n    curs = db_conn.cursor()\t\n    \n    curs.execute('''\n        SELECT\n            insertedon,\n            sum(CASE WHEN http_code = 200 THEN 1 ELSE 0 END)\n        FROM dataclient\n        WHERE http_code != 0\n        GROUP BY insertedon\n        ORDER BY insertedon DESC \n        LIMIT 15\n    ''')\n    \n    traffic_records = curs.fetchall()\n    \n    curs.close()\t\n    db_conn.close()\n    \n    data_arr = []\t\n    label_arr = []\n    \n    '''\n        For each traffic record found\n    '''\n    for record in reversed(traffic_records):\n        \n        data_arr.append(str(record[1]))\n        label_arr.append(str(record[0]))\n    \n    if len(label_arr) > 0:\n        \n        for n in range(len(label_arr) + 1, 16):\t\n            \n            data_arr.insert(0, '0')\n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\n    \n    #custom_functions.add_time(label_arr, data_arr)\n        \n    return {\n        'code': 200,\n        'body': json.dumps([{\n            'data': ','.join(data_arr),\n            'labels': ','.join(label_arr),\n        }])\n    }"
    },
    "Description": "Retrieves client traffic logs from the database",
    "Environment": {
     "Variables": {
      "DEMO_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbAdminSecretArn}}"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "GetClientTrafficRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "GetClientTrafficLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "GetClientTraffic"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "GetClientTraffic"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "GetClientTrafficMethod": {
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W59",
       "reason": "This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "$input.path('$.body')"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\" #if($foreach.hasNext),#end #end }\n}"
     },
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "GetClientTraffic",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "OperationName": "getClientTraffic",
    "ResourceId": {
     "Ref": "GetClientTrafficResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "GetClientTrafficMethodInvocationPermission": {
   "DependsOn": [
    "GetClientTraffic"
   ],
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetClientTraffic",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Fn::Join": [
         "",
         [
          "{{resolve:ssm:/",
          {
           "Ref": "MainStackName"
          },
          "/DemoAppApiId}}"
         ]
        ]
       },
       "/*/",
       "GET",
       "/",
       "get-client-traffic"
      ]
     ]
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "GetClientTrafficResource": {
   "Condition": "",
   "DependsOn": [],
   "Properties": {
    "ParentId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/ApiRootResourceId}}"
      ]
     ]
    },
    "PathPart": "get-client-traffic",
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Resource"
  },
  "GetClientTrafficResourceOptionsMethod": {
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "{}"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "{\"statusCode\": 200}"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "GetClientTrafficResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "GetClientTrafficRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbAdminSecretArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/DemoDbAdminSecretArn}}"
            ]
           ]
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/KmsKeyArn}}"
            ]
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "database-secret-retrieval"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "GetFailoverEvents": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\nimport multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n        \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        SELECT \n            event,\n            to_char(insertedon,'HH24:MI:SS') AS time, \n            insertedon \n        FROM failoverevents\n        ORDER BY insertedon\n    ''');\n    \n    failover_events = curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n    records_to_return = []\n    \n    for x in failover_events:\n    \n        c = 0\n        temp2 = {}\n        \n        for col in curs.description:\n            \n            temp2.update({str(col[0]): x[c]})\n            c += 1\n        \n        records_to_return.append(temp2)\n    \n    return {\n        'code': 200,\n        'body': json.dumps(records_to_return, default = str)\n    }"
    },
    "Description": "Retrieves failover events from the database",
    "Environment": {
     "Variables": {
      "DEMO_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbAdminSecretArn}}"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "GetFailoverEventsRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "GetFailoverEventsLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "GetFailoverEvents"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "GetFailoverEvents"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "GetFailoverEventsMethod": {
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W59",
       "reason": "This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "$input.path('$.body')"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\" #if($foreach.hasNext),#end #end }\n}"
     },
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "GetFailoverEvents",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "OperationName": "getFailoverEvents",
    "ResourceId": {
     "Ref": "GetFailoverEventsResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "GetFailoverEventsMethodInvocationPermission": {
   "DependsOn": [
    "GetFailoverEvents"
   ],
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetFailoverEvents",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Fn::Join": [
         "",
         [
          "{{resolve:ssm:/",
          {
           "Ref": "MainStackName"
          },
          "/DemoAppApiId}}"
         ]
        ]
       },
       "/*/",
       "GET",
       "/",
       "get-failover-events"
      ]
     ]
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "GetFailoverEventsResource": {
   "Condition": "",
   "DependsOn": [],
   "Properties": {
    "ParentId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/ApiRootResourceId}}"
      ]
     ]
    },
    "PathPart": "get-failover-events",
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Resource"
  },
  "GetFailoverEventsResourceOptionsMethod": {
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "{}"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "{\"statusCode\": 200}"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "GetFailoverEventsResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "GetFailoverEventsRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbAdminSecretArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/DemoDbAdminSecretArn}}"
            ]
           ]
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/KmsKeyArn}}"
            ]
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "database-secret-retrieval"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "InitiateFailover": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef trigger_failover():\n    \n    try:\n        \n        boto3.client('rds').failover_db_cluster(\n            DBClusterIdentifier = os.environ['APP_DB_CLUSTER_IDENTIFIER']\n        )\n        \n    except boto3_client_error as e:\n        raise Exception('Failed to Initiate Cluster Failover: ' + str(e))\n        \ndef log_failover_event():\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n\n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        INSERT INTO failoverevents (event, insertedon) \n            VALUES (1, %s)\n    ''', (\n        datetime.datetime.now().strftime(\"%m/%d/%Y %H:%M:%S\"), \n    ))\n    \n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n    \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    trigger_failover()\n\n    log_failover_event()\n    \n    return {\n        'code': 200,\n        'body': []\n    }"
    },
    "Description": "Logs failover events",
    "Environment": {
     "Variables": {
      "APP_DB_CLUSTER_IDENTIFIER": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterIdentifier}}"
        ]
       ]
      },
      "DEMO_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbAdminSecretArn}}"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "InitiateFailoverRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "InitiateFailoverLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "InitiateFailover"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "InitiateFailover"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "InitiateFailoverMethod": {
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W59",
       "reason": "This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "$input.path('$.body')"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\" #if($foreach.hasNext),#end #end }\n}"
     },
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "InitiateFailover",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "OperationName": "getInitiateFailover",
    "ResourceId": {
     "Ref": "InitiateFailoverResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "InitiateFailoverMethodInvocationPermission": {
   "DependsOn": [
    "InitiateFailover"
   ],
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "InitiateFailover",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Fn::Join": [
         "",
         [
          "{{resolve:ssm:/",
          {
           "Ref": "MainStackName"
          },
          "/DemoAppApiId}}"
         ]
        ]
       },
       "/*/",
       "GET",
       "/",
       "initiate-failover"
      ]
     ]
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "InitiateFailoverResource": {
   "Condition": "",
   "DependsOn": [],
   "Properties": {
    "ParentId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/ApiRootResourceId}}"
      ]
     ]
    },
    "PathPart": "initiate-failover",
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Resource"
  },
  "InitiateFailoverResourceOptionsMethod": {
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "ResponseTemplates": {
        "application/json": "{}"
       },
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "RequestTemplates": {
      "application/json": "{\"statusCode\": 200}"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "InitiateFailoverResource"
    },
    "RestApiId": {
     "Fn::Join": [
      "",
      [
       "{{resolve:ssm:/",
       {
        "Ref": "MainStackName"
       },
       "/DemoAppApiId}}"
      ]
     ]
    }
   },
   "Type": "AWS::ApiGateway::Method"
  },
  "InitiateFailoverRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbAdminSecretArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/DemoDbAdminSecretArn}}"
            ]
           ]
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/KmsKeyArn}}"
            ]
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "database-secret-retrieval"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rds:FailoverDBCluster"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbClusterArn}}"
            ]
           ]
          }
         ],
         "Sid": "InitiateClusterFailover"
        }
       ]
      },
      "PolicyName": "initiate-cluster-failover"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  }
 }
}