{
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [],
   "ParameterLabels": {}
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This application deploys a Global RDS Aurora cluster.",
  "LastUpdated": "November 22, 2023",
  "Version": "v1.5"
 },
 "Parameters": {
  "CodeDownloadUrl": {
   "Default": "https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DatabaseAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DatabaseAdminUsername": {
   "Default": "AuroraAdmin",
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "DemoDashboardUserEmail": {
   "Description": "The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".",
   "Type": "String"
  },
  "DeployDemoDashboard": {
   "AllowedValues": [
    "No",
    "Yes"
   ],
   "Default": "Yes",
   "Description": "Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed to us-east-1, regardless of which region you deploy this stack to.",
   "Type": "String"
  },
  "GitHubGhSessionValue": {
   "Description": "The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "GitHubUserSessionValue": {
   "Description": "The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "LambdaLayerArn": {
   "Type": "String"
  },
  "MainStackName": {
   "Type": "String"
  },
  "PrivateSubnetZoneACidr": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrivateSubnetZoneBCidr": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneACidr": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneBCidr": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "RegionalWafAclArn": {
   "Type": "String"
  },
  "VpcCidr": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  }
 },
 "Resources": {
  "FailoverCompletedEventListener": {
   "DependsOn": [
    "FailoverCompletedHandler"
   ],
   "Properties": {
    "Description": "Invokes Handler When Failover is Completed",
    "EventPattern": {
     "detail": {
      "EventID": [
       "RDS-EVENT-0071"
      ],
      "SourceArn": [
       {
        "Fn::Join": [
         "",
         [
          "{{resolve:ssm:/",
          {
           "Ref": "MainStackName"
          },
          "/AppDbClusterArn}}"
         ]
        ]
       }
      ]
     },
     "detail-type": [
      "RDS DB Cluster Event"
     ],
     "source": [
      "aws.rds"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "FailoverCompletedHandler",
        "Arn"
       ]
      },
      "Id": "FailoverCompletedHandler"
     }
    ]
   },
   "Type": "AWS::Events::Rule"
  },
  "FailoverCompletedHandler": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "These logs do not contain sensitive data."
      },
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n    \n    '''\n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (3,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n        \n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (4,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n    '''\n    \n    '''\n        Logs Failover Completion\n    '''\n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        INSERT INTO failoverevents (event, insertedon) \n            VALUES (3, %s)\n    ''', (\n        datetime.now().strftime(\"%m/%d/%Y %H:%M:%S\"), \n    ))\n    \n    db_conn.commit()\n        \n    curs.close()\n    db_conn.close()\n    \n    return True"
    },
    "Description": "Processes failover completed events",
    "Environment": {
     "Variables": {
      "APP_DB_CLUSTER_IDENTIFIER": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterIdentifier}}"
        ]
       ]
      },
      "APP_DB_CLUSTER_READER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterReaderEndpoint}}"
        ]
       ]
      },
      "APP_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "APP_DB_PROXY_NAME": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/",
         "AppDbProxyName}}"
        ]
       ]
      },
      "APP_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbAdminSecretArn}}"
        ]
       ]
      },
      "DEMO_DB_CLUSTER_READER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterReaderEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbAdminSecretArn}}"
        ]
       ]
      },
      "PUBLIC_APP_URL": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/CoreAppUrl}}"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "FailoverCompletedHandlerRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "FailoverCompletedHandlerLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "FailoverCompletedHandler"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "FailoverCompletedHandler"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "FailoverCompletedHandlerPermission": {
   "DependsOn": [
    "FailoverCompletedHandler",
    "FailoverCompletedEventListener"
   ],
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "FailoverCompletedHandler"
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "FailoverCompletedEventListener",
      "Arn"
     ]
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "FailoverCompletedHandlerRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbAdminSecretArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/DemoDbAdminSecretArn}}"
            ]
           ]
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/KmsKeyArn}}"
            ]
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "main-policy"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rds:RegisterDBProxyTargets"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbProxyArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbClusterArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "rds",
             {
              "Ref": "AWS::Region"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "target-group",
             "*"
            ]
           ]
          }
         ],
         "Sid": "RegisterProxyTargets"
        }
       ]
      },
      "PolicyName": "register-proxy-targets"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "FailoverStartedEventListener": {
   "DependsOn": [
    "FailoverStartedHandler"
   ],
   "Properties": {
    "Description": "Invokes Handler When Failover is Started",
    "EventPattern": {
     "detail": {
      "EventID": [
       "RDS-EVENT-0073"
      ],
      "SourceArn": [
       {
        "Fn::Join": [
         "",
         [
          "{{resolve:ssm:/",
          {
           "Ref": "MainStackName"
          },
          "/AppDbClusterArn}}"
         ]
        ]
       }
      ]
     },
     "detail-type": [
      "RDS DB Cluster Event"
     ],
     "source": [
      "aws.rds"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "FailoverStartedHandler",
        "Arn"
       ]
      },
      "Id": "FailoverStartedHandler"
     }
    ]
   },
   "Type": "AWS::Events::Rule"
  },
  "FailoverStartedHandler": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "These logs do not contain sensitive data."
      },
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n\n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        INSERT INTO failoverevents (event, insertedon) \n            VALUES (2, %s)\n    ''', (\n        datetime.datetime.now(),\n    ))\n    \n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n    \n    return True"
    },
    "Description": "Processes failover started events",
    "Environment": {
     "Variables": {
      "APP_DB_CLUSTER_IDENTIFIER": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterIdentifier}}"
        ]
       ]
      },
      "APP_DB_CLUSTER_READER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterReaderEndpoint}}"
        ]
       ]
      },
      "APP_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "APP_DB_PROXY_NAME": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/",
         "AppDbProxyName}}"
        ]
       ]
      },
      "APP_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/AppDbAdminSecretArn}}"
        ]
       ]
      },
      "DEMO_DB_CLUSTER_READER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterReaderEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_CLUSTER_WRITER_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbClusterWriterEndpoint}}"
        ]
       ]
      },
      "DEMO_DB_SECRET_ARN": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/DemoDbAdminSecretArn}}"
        ]
       ]
      },
      "PUBLIC_APP_URL": {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/CoreAppUrl}}"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "LambdaLayerArn"
     }
    ],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "FailoverStartedHandlerRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "PassThrough"
    },
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/LambdaSecurityGroupId}}"
        ]
       ]
      }
     ],
     "SubnetIds": [
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneAId}}"
        ]
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         "{{resolve:ssm:/",
         {
          "Ref": "MainStackName"
         },
         "/PrivateSubnetZoneBId}}"
        ]
       ]
      }
     ]
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "FailoverStartedHandlerLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "FailoverStartedHandler"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "FailoverStartedHandler"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "FailoverStartedHandlerPermission": {
   "DependsOn": [
    "FailoverStartedHandler",
    "FailoverStartedEventListener"
   ],
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "FailoverStartedHandler"
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "FailoverStartedEventListener",
      "Arn"
     ]
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "FailoverStartedHandlerRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "secretsmanager:GetSecretValue"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbAdminSecretArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/DemoDbAdminSecretArn}}"
            ]
           ]
          }
         ],
         "Sid": "GetRDSAdminSecret"
        },
        {
         "Action": [
          "kms:Decrypt"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/KmsKeyArn}}"
            ]
           ]
          }
         ],
         "Sid": "DecryptWithKMS"
        }
       ]
      },
      "PolicyName": "main-policy"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rds:RegisterDBProxyTargets"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbProxyArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "{{resolve:ssm:/",
             {
              "Ref": "MainStackName"
             },
             "/AppDbClusterArn}}"
            ]
           ]
          },
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "rds",
             {
              "Ref": "AWS::Region"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "target-group",
             "*"
            ]
           ]
          }
         ],
         "Sid": "RegisterProxyTargets"
        }
       ]
      },
      "PolicyName": "register-proxy-targets"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  }
 }
}