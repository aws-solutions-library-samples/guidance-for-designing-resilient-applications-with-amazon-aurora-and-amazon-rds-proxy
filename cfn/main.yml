Conditions:
  DeployDemoModules: !Equals
    - !Ref 'DeployDemoDashboard'
    - 'Yes'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Codebase
        Parameters:
          - CodeDownloadUrl
      - Label:
          default: Database
        Parameters:
          - DatabaseAdminUsername
          - DatabaseAdminPassword
      - Label:
          default: Networking
        Parameters:
          - VpcCidr
          - PublicSubnetZoneACidr
          - PublicSubnetZoneBCidr
          - PrivateSubnetZoneACidr
          - PrivateSubnetZoneBCidr
      - Label:
          default: Demo Application
        Parameters:
          - DeployDemoDashboard
          - DemoDashboardUserEmail
      - Label:
          default: Temporary Testing Params
        Parameters:
          - GitHubGhSessionValue
          - GitHubUserSessionValue
    ParameterLabels:
      CodeDownloadUrl:
        default: Download URL
      DatabaseAdminPassword:
        default: Admin Password
      DatabaseAdminUsername:
        default: Admin Username
      DemoDashboardUserEmail:
        default: Demo Dashboard User Email
      DeployDemoDashboard:
        default: Deploy Demo Dashboard
      GitHubGhSessionValue:
        default: GitHub "_gh_sess" Cookie
      GitHubUserSessionValue:
        default: GitHub "user_session" Cookie
      PrivateSubnetZoneACidr:
        default: Private Subnet Zone A CIDR
      PrivateSubnetZoneBCidr:
        default: Private Subnet Zone B CIDR
      PublicSubnetZoneACidr:
        default: Public Subnet Zone A CIDR
      PublicSubnetZoneBCidr:
        default: Public Subnet Zone B CIDR
      VpcCidr:
        default: VPC CIDR
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This template deploys a 0-RPO database architecture using Amazon RDS, Amazon SQS, AWS Lambda, and Amazon API Gateway.
  LastUpdated: May 18, 2024
  Version: v1.9
Outputs:
  CloudWatchDashboardUrl:
    Description: CloudWatch Dashboard URL
    Value: !Join
      - ''
      - - https://console.aws.amazon.com/cloudwatch/home?region=
        - !Ref 'AWS::Region'
        - '#dashboards/dashboard/'
        - !Ref 'CloudWatchDashboard'
  DemoDashboardUrl:
    Condition: DeployDemoModules
    Value: !Join
      - ''
      - - !GetAtt 'CfnExportRetrieverResource.DashboardWebsite'
        - !Join
          - ''
          - - !Join
              - ''
              - - !Join
                  - ''
                  - - ?apiHost=
                    - !GetAtt 'CfnExportRetrieverResource.DemoApiHost'
                - '&awsRegion='
                - !Ref 'AWS::Region'
            - '&cognitoClientId='
            - !GetAtt 'CfnExportRetrieverResource.CognitoClientId'
Parameters:
  CodeDownloadUrl:
    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
    Type: String
  DatabaseAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DatabaseAdminUsername:
    Default: AuroraAdmin
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  DemoDashboardUserEmail:
    Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
    Type: String
  DeployDemoDashboard:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: >-
      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
      to us-east-1, regardless of which region you deploy this stack to.
    Type: String
  GitHubGhSessionValue:
    Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
    Type: String
  GitHubUserSessionValue:
    Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
    Type: String
  PrivateSubnetZoneACidr:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrivateSubnetZoneBCidr:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PublicSubnetZoneACidr:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PublicSubnetZoneBCidr:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  VpcCidr:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
Resources:
  CfnExportRetriever:
    DependsOn: []
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
            reason: This function is used to support the demo environment and does not require provisioned concurrency.
          - id: W89
            reason: This function run once to set up the environment, and is invoked before the VPC is provisioned.
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nimport subprocess\n\nsubprocess.call('pip install urllib3<2 cfnresponse\
          \ -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL) # nosec Not subject to user input\nsys.path.insert(1, '/tmp/') # nosec Required for module import\n\
          \nimport io\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Region | str\n    - ExportPrefix | str\n\
          '''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::',\
          \ '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n    \n    cfn_client = boto3Session.client('cloudformation')\n \
          \   \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        try:\n            \n            response = cfn_client.list_exports()\n            \n            '''\n            \
          \    For each CloudFormation export in this region\n            '''\n            for export in response['Exports']:\n            \t\n                '''\n                    If this export has\
          \ the proper prefix\n                '''\n                if export['Name'].startswith(arguments['ExportPrefix']):\n                    \n                    response_data[export['Name'].replace(arguments['ExportPrefix']\
          \ + '-', '')] = export['Value']\n                \n        except ClientError as e:\n            \n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\n            return cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
      Description: ''
      Handler: index.handler
      Layers: []
      MemorySize: 128
      Role: !GetAtt 'CfnExportRetrieverRole.Arn'
      Runtime: python3.9
      Timeout: 15
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  CfnExportRetrieverLogGroup:
    DeletionPolicy: Delete
    DependsOn:
      - CfnExportRetriever
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'CfnExportRetriever'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  CfnExportRetrieverResource:
    DependsOn:
      - CoreAppStackSet
      - DatabasesStackSet
      - DemoDashboardStackSet
      - DemoAPIDeploymentStackSet
      - CfnExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'AWS::Region'
        Version: 1.22
      ServiceToken: !GetAtt 'CfnExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  CfnExportRetrieverRole:
    DependsOn: []
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: cloudformation:ListExports does not support more resource conditions.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudformation:ListExports
                Effect: Allow
                Resource:
                  - '*'
                Sid: GetCFNOutputs
          PolicyName: main-policy
    Type: AWS::IAM::Role
  CloudWatchDashboard:
    DependsOn:
      - CoreAppStackSet
      - DatabasesStackSet
      - CfnExportRetrieverResource
    Properties:
      DashboardBody: !Sub
        - >-
          {"widgets": [{"type": "metric", "x": 0, "y": 0, "width": 6, "height": 6, "properties": {"view": "timeSeries", "metrics": [["AWS/RDS", "DatabaseConnections", "DBClusterIdentifier", "${APP_DB_CLUSTER_IDENTIFIER}"]],
          "period": 60, "region": "${AWS_REGION}", "title": "RDS Cluster - DB Connections"}}, {"type": "metric", "x": 6, "y": 0, "width": 6, "height": 3, "properties": {"metrics": [["AWS/RDS", "DatabaseConnections",
          "ProxyName", "${APP_DB_PROXY_NAME}"]], "view": "timeSeries", "region": "${AWS_REGION}", "stat": "Sum", "period": 60, "title": "RDS Proxy - DB Connections"}}, {"type": "metric", "x": 6, "y": 3,
          "width": 6, "height": 3, "properties": {"view": "timeSeries", "metrics": [["AWS/RDS", "ClientConnections", "ProxyName", "${APP_DB_PROXY_NAME}"]], "region": "${AWS_REGION}", "stat": "Sum", "period":
          60, "title": "RDS Proxy - Client Connections"}}, {"type": "metric", "x": 12, "y": 0, "width": 6, "height": 6, "properties": {"view": "timeSeries", "metrics": [["AWS/RDS", "AvailabilityPercentage",
          "TargetRole", "READWRITE", "ProxyName", "${APP_DB_PROXY_NAME}", "TargetGroup", "default"], ["AWS/RDS", "AvailabilityPercentage", "TargetRole", "READ_ONLY", "ProxyName", "${APP_DB_PROXY_NAME}",
          "TargetGroup", "default"]], "region": "${AWS_REGION}", "title": "RDS Proxy - Availability Percentage", "stat": "Average", "period": 60}}, {"type": "metric", "x": 18, "y": 0, "width": 6, "height":
          6, "properties": {"metrics": [["AWS/ApiGateway", "4XXError", "ApiName", "${AWS_REGION} - Core Application", {"region": "${AWS_REGION}"}], ["AWS/ApiGateway", "5XXError", "ApiName", "${AWS_REGION}
          - Core Application", {"region": "${AWS_REGION}"}]], "view": "timeSeries", "stacked": false, "region": "${AWS_REGION}", "period": 60, "stat": "Sum", "title": "Core App API Errors"}}, {"height":
          15, "width": 24, "y": 6, "x": 0, "type": "explorer", "properties": {"metrics": [{"metricName": "ConcurrentExecutions", "resourceType": "AWS::Lambda::Function", "stat": "Sum"}, {"metricName": "Errors",
          "resourceType": "AWS::Lambda::Function", "stat": "Sum"}], "aggregateBy": {"key": "*", "func": "SUM"}, "labels": [{"key": "aws:cloudformation:logical-id", "value": "CoreAppHandler"}], "widgetOptions":
          {"legend": {"position": "hidden"}, "view": "timeSeries", "stacked": false, "rowsPerPage": 1, "widgetsPerRow": 2}, "period": 60, "splitBy": "", "region": "${AWS_REGION}", "title": "Core App Lambda
          Function"}}]}
        - APP_DB_CLUSTER_IDENTIFIER: !GetAtt 'CfnExportRetrieverResource.AppDbClusterIdentifier'
          APP_DB_PROXY_NAME: !GetAtt 'CfnExportRetrieverResource.AppDbProxyName'
          AWS_REGION: !Ref 'AWS::Region'
          CORE_APP_STACK_ARN: !Join
            - ''
            - - StackSet-
              - !GetAtt 'CoreAppStackSet.StackSetId'
      DashboardName: !Ref 'AWS::StackName'
    Type: AWS::CloudWatch::Dashboard
  CoreAppStackSet:
    Condition: ''
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - DatabasesStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Core-App'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Core-App
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: May 18, 2024
          Version: v1.9
        Outputs:
          CoreAppHandlerName:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - CoreAppHandlerName
            Value: !Ref 'CoreAppHandler'
          CoreAppUrl:
            Condition: ''
            Value: !Join
              - ''
              - - !GetAtt 'Api.RestApiId'
                - .execute-api.
                - !Ref 'AWS::Region'
                - .amazonaws.com/v1
          PendingWritesDBDeadLetterQueueArn:
            Condition: ''
            Value: !GetAtt 'PendingDBInsertsDl.Arn'
          PendingWritesDBDeadLetterQueueUrl:
            Condition: ''
            Value: !Ref 'PendingDBInsertsDl'
          PendingWritesDBQueueArn:
            Condition: ''
            Value: !GetAtt 'PendingDBInserts.Arn'
          PendingWritesDBQueueUrl:
            Condition: ''
            Value: !Ref 'PendingDBInserts'
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          Api:
            Properties:
              EndpointConfiguration:
                Types:
                  - REGIONAL
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - ' - Core Application'
            Type: AWS::ApiGateway::RestApi
          CoreAppHandler:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\n\
                  import datetime\nimport psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\
                  \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    for incoming_record in event['Records']:\n        \n        guid = incoming_record['body']\n        \n        try:\n\
                  \            \n            app_db_credentials = custom_functions.get_db_credentials('App')\n            \n            db_conn = psycopg2.connect(\n                host = os.environ['APP_DB_PROXY_WRITER_ENDPOINT'],\n\
                  \                port = app_db_credentials['port'],\n                user = app_db_credentials['username'],\n                password = app_db_credentials['password'],\n                database\
                  \ = app_db_credentials['database'],\n                connect_timeout = 3,\n                sslmode = 'require',\n            )\n            \n            id = 0\n            curs = db_conn.cursor()\n\
                  \            \n            curs.execute('''\n                INSERT INTO dataserver (guid, insertedon) VALUES (%s, %s) \n                RETURNING id\n            ''', (\n                guid,\n\
                  \                datetime.datetime.now(tz = dateutil.tz.gettz('US/Eastern')).strftime(\"%m/%d/%Y %H:%M:%S\")\n            ))\n    \n            id = curs.fetchone()[0]\n            db_conn.commit()\n\
                  \            curs.close()\n            db_conn.close()\n        \n        except Exception as e:\n            print(e)\n            raise Exception('Failed to Write Record to the Database')\n\
                  \    \n    return True"
              Description: Serves as the root handler behind the Web ALB
              Environment:
                Variables:
                  APP_DB_PROXY_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - AppDbProxyWriterEndpoint}}
                  APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'CoreAppHandlerRole.Arn'
              Runtime: python3.9
              Timeout: 5
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          CoreAppHandlerGetAndDeleteFromSQSQueuePolicy:
            DependsOn:
              - CoreAppHandlerRole
              - PendingDBInserts
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:GetQueueAttributes
                    Effect: Allow
                    Resource:
                      - !GetAtt 'PendingDBInserts.Arn'
              PolicyName: get-and-delete-from-sqs-queue
              Roles:
                - !Ref 'CoreAppHandlerRole'
            Type: AWS::IAM::Policy
          CoreAppHandlerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - CoreAppHandler
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'CoreAppHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          CoreAppHandlerNameParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Core App Handler Function Name for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - CoreAppHandlerName
              Tier: Standard
              Type: String
              Value: !Ref 'CoreAppHandler'
            Type: AWS::SSM::Parameter
          CoreAppHandlerPendingDBInsertsEventSource:
            DependsOn:
              - CoreAppHandlerPendingDBInsertsPermission
              - CoreAppHandlerGetAndDeleteFromSQSQueuePolicy
              - PendingDBInserts
            Properties:
              BatchSize: 1
              Enabled: true
              EventSourceArn: !GetAtt 'PendingDBInserts.Arn'
              FunctionName: !Ref 'CoreAppHandler'
            Type: AWS::Lambda::EventSourceMapping
          CoreAppHandlerPendingDBInsertsPermission:
            DependsOn:
              - PendingDBInserts
              - CoreAppHandler
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'CoreAppHandler'
              Principal: sqs.amazonaws.com
              SourceArn: !GetAtt 'PendingDBInserts.Arn'
            Type: AWS::Lambda::Permission
          CoreAppHandlerRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          CoreAppUrlParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Core App API Host for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - CoreAppUrl
              Tier: Standard
              Type: String
              Value: !Join
                - ''
                - - !GetAtt 'Api.RestApiId'
                  - .execute-api.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com/v1
            Type: AWS::SSM::Parameter
          DEFAULT4XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_4XX
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::GatewayResponse
          DEFAULT5XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_5XX
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::GatewayResponse
          Deployment:
            DependsOn:
              - RootGetMethod
              - RootOptionsMethod
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W68
                    reason: This API does not use API keys.
            Properties:
              Description: Initial Deployment
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::Deployment
          DeploymentStage:
            DependsOn:
              - Deployment
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W69
                    reason: This API does not use API keys.
                  - id: W64
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              DeploymentId: !Ref 'Deployment'
              MethodSettings:
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: GET
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
              RestApiId: !Ref 'Api'
              StageName: v1
            Type: AWS::ApiGateway::Stage
          PendingDBInserts:
            DependsOn:
              - PendingDBInsertsDl
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W48
                    reason: This resource is being used to support an ephemeral demo environment and will not contain sensitive data.
            Properties:
              ContentBasedDeduplication: true
              FifoQueue: true
              MessageRetentionPeriod: 1209600
              RedrivePolicy:
                deadLetterTargetArn: !GetAtt 'PendingDBInsertsDl.Arn'
                maxReceiveCount: 25
              VisibilityTimeout: 5
            Type: AWS::SQS::Queue
          PendingDBInsertsDl:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W48
                    reason: This resource is being used to support an ephemeral demo environment and will not contain sensitive data.
            Properties:
              ContentBasedDeduplication: true
              FifoQueue: true
              MessageRetentionPeriod: 1209600
            Type: AWS::SQS::Queue
          PendingWritesDBDeadLetterQueueArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Pending Writes DB Dead Letter Queue ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PendingWritesDBDeadLetterQueueArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'PendingDBInsertsDl.Arn'
            Type: AWS::SSM::Parameter
          PendingWritesDBDeadLetterQueueUrlParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Pending Writes DB Dead Letter Queue URL for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PendingWritesDBDeadLetterQueueUrl
              Tier: Standard
              Type: String
              Value: !Ref 'PendingDBInsertsDl'
            Type: AWS::SSM::Parameter
          PendingWritesDBQueueArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Pending Writes DB Queue ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PendingWritesDBQueueArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'PendingDBInserts.Arn'
            Type: AWS::SSM::Parameter
          PendingWritesDBQueueUrlParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Pending Writes DB Queue URL for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PendingWritesDBQueueUrl
              Tier: Standard
              Type: String
              Value: !Ref 'PendingDBInserts'
            Type: AWS::SSM::Parameter
          RootGetMethod:
            DependsOn:
              - Api
              - PendingDBInserts
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                Credentials: !GetAtt 'SQSAPIRole.Arn'
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestParameters:
                  integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                RequestTemplates:
                  application/json: Action=SendMessage&MessageBody=$input.params()["querystring"]["guid"]&MessageGroupId=$input.params()["querystring"]["guid"]
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :sqs:path/
                    - !Ref 'AWS::AccountId'
                    - /
                    - !GetAtt 'PendingDBInserts.QueueName'
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !GetAtt 'Api.RootResourceId'
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::Method
          RootMethodInvocationPermission:
            DependsOn:
              - CoreAppHandler
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'CoreAppHandler.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Ref 'Api'
                  - /*/
                  - GET
                  - /
            Type: AWS::Lambda::Permission
          RootOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !GetAtt 'Api.RootResourceId'
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::Method
          SQSAPIRole:
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - apigateway.amazonaws.com
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - sqs:SendMessage
                        Effect: Allow
                        Resource:
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - sqs
                              - !Ref 'AWS::Region'
                              - !Ref 'AWS::AccountId'
                              - '*'
                  PolicyName: master-policy
            Type: AWS::IAM::Role
          WafAssociation:
            DependsOn:
              - DeploymentStage
            Properties:
              ResourceArn: !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':apigateway:'
                  - !Ref 'AWS::Region'
                  - ::/restapis/
                  - !Ref 'Api'
                  - /stages/v1
              WebACLArn: !Ref 'RegionalWafAclArn'
            Type: AWS::WAFv2::WebACLAssociation
    Type: AWS::CloudFormation::StackSet
  DatabasesStackSet:
    Condition: ''
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - NetworkingStackSet
      - LambdaLayerCreatorResource
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Databases'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Databases
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template deploys the app and demo databases (if applicable)
          LastUpdated: May 18, 2024
          Version: v1.9
        Outputs:
          AppDbAdminSecretArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - AppDbAdminSecretArn
            Value: !Ref 'AppDbAdminSecret'
          AppDbClusterArn:
            Condition: ''
            Value: !GetAtt 'AppCluster.DBClusterArn'
          AppDbClusterIdentifier:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - AppDbClusterIdentifier
            Value: !Ref 'AppCluster'
          AppDbClusterReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'AppCluster.ReadEndpoint.Address'
          AppDbClusterWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'AppCluster.Endpoint.Address'
          AppDbInstance1Endpoint:
            Condition: ''
            Value: !GetAtt 'AppInstance1.Endpoint.Address'
          AppDbInstance2Endpoint:
            Condition: ''
            Value: !GetAtt 'AppInstance2.Endpoint.Address'
          AppDbProxyArn:
            Condition: ''
            Value: !GetAtt 'AppDbProxy.DBProxyArn'
          AppDbProxyName:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - AppDbProxyName
            Value: !Ref 'AppDbProxy'
          AppDbProxyPort:
            Condition: ''
            Value: !GetAtt 'AppCluster.Endpoint.Port'
          AppDbProxyReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'
          AppDbProxyWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'AppDbProxy.Endpoint'
          DemoDbAdminSecretArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - DemoDbAdminSecretArn
            Value: !Ref 'DemoDbAdminSecret'
          DemoDbClusterArn:
            Condition: ''
            Value: !GetAtt 'DemoCluster.DBClusterArn'
          DemoDbClusterIdentifier:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - DemoDbClusterIdentifier
            Value: !Ref 'DemoCluster'
          DemoDbClusterReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'DemoCluster.ReadEndpoint.Address'
          DemoDbClusterWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'DemoCluster.Endpoint.Address'
          KmsKeyArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - KmsKeyArn
            Value: !GetAtt 'KMSKey.Arn'
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          AppCluster:
            DeletionPolicy: Delete
            DependsOn:
              - DbSubnetGroup
            Properties:
              BackupRetentionPeriod: 30
              DBSubnetGroupName: !Ref 'DbSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '14.7'
              KmsKeyId: !Ref 'KMSKey'
              MasterUserPassword: !Ref 'DatabaseAdminPassword'
              MasterUsername: !Ref 'DatabaseAdminUsername'
              Port: 5432
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'DbClusterSecurityGroup'
            Type: AWS::RDS::DBCluster
          AppDatabasePreparerResource:
            DependsOn:
              - DatabasePreparerLogGroup
              - AppInstance1
              - AppInstance2
              - AppDbAdminSecret
            Properties:
              Properties:
                DatabaseHost: !GetAtt 'AppDbProxy.Endpoint'
                DatabaseIdentifier: App
                QueriesToExecute:
                  - "\n                CREATE SEQUENCE IF NOT EXISTS data_sequence start 1 increment 1;\n                "
                  - "\n                CREATE TABLE IF NOT EXISTS dataserver (\n                    id integer not null primary key default nextval('data_sequence'),\n                    guid VARCHAR(255) NOT NULL,\n\
                    \                    insertedon timestamp NOT NULL DEFAULT NOW(),\n                    migratedon timestamp NOT NULL DEFAULT NOW()\n                );\n                "
              ServiceToken: !GetAtt 'DatabasePreparer.Arn'
              Type: Custom::ExecuteQueriesAgainstDatabase
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          AppDbAdminSecret:
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Admin Account for '
                  - !Ref 'MainStackName'
              KmsKeyId: !Ref 'KMSKey'
              SecretString: !Join
                - ''
                - - '{"username": "'
                  - !Ref 'DatabaseAdminUsername'
                  - '", "password": "'
                  - !Ref 'DatabaseAdminPassword'
                  - '", "database": "template1"}'
            Type: AWS::SecretsManager::Secret
          AppDbAdminSecretArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Admin Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbAdminSecretArn
              Tier: Standard
              Type: String
              Value: !Ref 'AppDbAdminSecret'
            Type: AWS::SSM::Parameter
          AppDbAdminSecretAttachment:
            DependsOn:
              - AppDbAdminSecret
              - AppCluster
            Properties:
              SecretId: !Ref 'AppDbAdminSecret'
              TargetId: !Ref 'AppCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          AppDbClusterArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional App DB Cluster ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbClusterArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppCluster.DBClusterArn'
            Type: AWS::SSM::Parameter
          AppDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional App DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'AppCluster'
            Type: AWS::SSM::Parameter
          AppDbClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Reader Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppCluster.ReadEndpoint.Address'
            Type: AWS::SSM::Parameter
          AppDbClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Writer Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppCluster.Endpoint.Address'
            Type: AWS::SSM::Parameter
          AppDbInstance1EndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Instance 1 Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbInstance1Endpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppInstance1.Endpoint.Address'
            Type: AWS::SSM::Parameter
          AppDbInstance2EndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Instance 2 Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbInstance2Endpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppInstance2.Endpoint.Address'
            Type: AWS::SSM::Parameter
          AppDbProxy:
            Properties:
              Auth:
                - SecretArn: !Ref 'AppDbAdminSecret'
              DBProxyName: !Ref 'AppCluster'
              EngineFamily: POSTGRESQL
              RequireTLS: true
              RoleArn: !GetAtt 'DbProxyRole.Arn'
              VpcSecurityGroupIds:
                - !Ref 'DbProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrivateSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrivateSubnetZoneBId}}
            Type: AWS::RDS::DBProxy
          AppDbProxyArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbProxyArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxy.DBProxyArn'
            Type: AWS::SSM::Parameter
          AppDbProxyNameParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Proxy name for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbProxyName
              Tier: Standard
              Type: String
              Value: !Ref 'AppDbProxy'
            Type: AWS::SSM::Parameter
          AppDbProxyPortParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy port for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbProxyPort
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppCluster.Endpoint.Port'
            Type: AWS::SSM::Parameter
          AppDbProxyReaderEndpoint:
            DependsOn:
              - AppDbProxy
            Properties:
              DBProxyEndpointName: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - app
                  - reader
              DBProxyName: !Ref 'AppDbProxy'
              TargetRole: READ_ONLY
              VpcSecurityGroupIds:
                - !Ref 'DbProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrivateSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PrivateSubnetZoneBId}}
            Type: AWS::RDS::DBProxyEndpoint
          AppDbProxyReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy reader endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbProxyReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'
            Type: AWS::SSM::Parameter
          AppDbProxyTargetGroup:
            DependsOn:
              - AppDbProxy
              - AppInstance1
            Properties:
              DBClusterIdentifiers:
                - !Ref 'AppCluster'
              DBProxyName: !Ref 'AppDbProxy'
              TargetGroupName: default
            Type: AWS::RDS::DBProxyTargetGroup
          AppDbProxyWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy writer endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - AppDbProxyWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxy.Endpoint'
            Type: AWS::SSM::Parameter
          AppInstance1:
            DependsOn:
              - DbSubnetGroup
              - AppCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              CACertificateIdentifier: rds-ca-rsa4096-g1
              DBClusterIdentifier: !Ref 'AppCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          AppInstance2:
            DependsOn:
              - DbSubnetGroup
              - AppCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              CACertificateIdentifier: rds-ca-rsa4096-g1
              DBClusterIdentifier: !Ref 'AppCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          ClusterParameterGroup:
            Properties:
              Description: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - ' - Cluster Param Group'
              Family: aurora-postgresql13
              Parameters:
                rds.logical_replication: 1
                wal_sender_timeout: 240000
            Type: AWS::RDS::DBClusterParameterGroup
          DatabasePreparer:
            DependsOn:
              - DatabasePreparerRole
              - AppDbAdminSecret
              - DemoDbAdminSecret
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport subprocess\nsubprocess.call('pip\
                  \ install urllib3<2 -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL) # nosec Not subject to user input\nsys.path.insert(1, '/tmp/') # nosec Required\
                  \ for package inclusion\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport cfnresponse\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\
                  \ncustom_functions = multi_region_db.Functions()\n\n'''\n    RDSAdminSecretArn\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    if 'Properties' in event['ResourceProperties']:\n\
                  \        arguments = event['ResourceProperties']['Properties']\n        \n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    if\
                  \ event['RequestType'] in ['Create', 'Update']:\n        \n        db_credentials = custom_functions.get_db_credentials(arguments['DatabaseIdentifier'])\n        \n        try:\n             \
                  \   \n            db_conn = psycopg2.connect(\n                host = db_credentials['host'],\n                port = db_credentials['port'],\n                user = db_credentials['username'],\n\
                  \                password = db_credentials['password'],\n                database = db_credentials['database'],\n                connect_timeout = 3,\n                sslmode = 'require',\n  \
                  \          )\n            \n            curs = db_conn.cursor()\n            \n            for query in arguments['QueriesToExecute']:\n                \n                # nosemgrep - Not subject\
                  \ to user input\n                curs.execute(query.replace('\\r','').replace('\\n',' '))\n                db_conn.commit()\n            \n            curs.close()\n            db_conn.close()\n\
                  \        \n        except Exception as error:\n\n            print('There was a problem executing the DDL statements: ' + str(error))\n            return cfnresponse.send(event, context, cfnresponse.FAILED,\
                  \ response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              Description: Executes DDL statements against new DB clusters to create necessary schema
              Environment:
                Variables:
                  APP_DB_SECRET_ARN: !Ref 'AppDbAdminSecret'
                  DEMO_DB_SECRET_ARN: !Ref 'DemoDbAdminSecret'
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'DatabasePreparerRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          DatabasePreparerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - DatabasePreparer
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DatabasePreparer'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DatabasePreparerRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'AppDbAdminSecret'
                          - !Ref 'DemoDbAdminSecret'
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !GetAtt 'KMSKey.Arn'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          DbClusterSecurityGroup:
            DependsOn:
              - DbProxySecurityGroup
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W5
                    reason: Access to dynamic public IPs is required.
            Properties:
              GroupDescription: RDS Security Group
              SecurityGroupEgress:
                - CidrIp: '0.0.0.0/0'
                  Description: HTTPS to RDS Service
                  FromPort: 443
                  IpProtocol: tcp
                  ToPort: 443
              SecurityGroupIngress:
                - Description: DB Access from In-Region Lambda Functions
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                  ToPort: 5432
                - Description: DB Access from In-Region RDS Proxy
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Ref 'DbProxySecurityGroup'
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /VpcId}}
            Type: AWS::EC2::SecurityGroup
          DbProxyRole:
            DependsOn:
              - KMSKey
              - AppDbAdminSecret
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - rds.amazonaws.com
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !GetAtt 'KMSKey.Arn'
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'AppDbAdminSecret'
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          DbProxySecurityGroup:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W5
                    reason: Access to dynamic public IPs is required.
            Properties:
              GroupDescription: RDS Proxy Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from Lambda
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /VpcId}}
            Type: AWS::EC2::SecurityGroup
          DbProxySecurityGroupEgressToDB:
            DependsOn:
              - DbProxySecurityGroup
              - DbClusterSecurityGroup
            Properties:
              Description: TCP Traffic to Source DB
              DestinationSecurityGroupId: !Ref 'DbClusterSecurityGroup'
              FromPort: 5432
              GroupId: !Ref 'DbProxySecurityGroup'
              IpProtocol: tcp
              ToPort: 5432
            Type: AWS::EC2::SecurityGroupEgress
          DbSubnetGroup:
            Properties:
              DBSubnetGroupDescription: Private Database Subnets
              DBSubnetGroupName: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - !Join
                    - ''
                    - !Split
                      - subnet-
                      - !Join
                        - '-'
                        - - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Private
                              - SubnetZoneAId}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Private
                              - SubnetZoneAId}}
              SubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Private
                    - SubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Private
                    - SubnetZoneBId}}
            Type: AWS::RDS::DBSubnetGroup
          DemoCluster:
            DeletionPolicy: Delete
            DependsOn:
              - DbSubnetGroup
            Properties:
              BackupRetentionPeriod: 30
              DBSubnetGroupName: !Ref 'DbSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '14.7'
              KmsKeyId: !Ref 'KMSKey'
              MasterUserPassword: !Ref 'DatabaseAdminPassword'
              MasterUsername: !Ref 'DatabaseAdminUsername'
              Port: 5432
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'DbClusterSecurityGroup'
            Type: AWS::RDS::DBCluster
          DemoDatabasePreparerResource:
            DependsOn:
              - DatabasePreparerLogGroup
              - DemoInstance1
              - DemoInstance2
              - DemoDbAdminSecret
            Properties:
              Properties:
                DatabaseHost: ''
                DatabaseIdentifier: Demo
                QueriesToExecute:
                  - "\n                CREATE TABLE IF NOT EXISTS dataclient (\n                    guid character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n                    primary_region integer\
                    \ NOT NULL,\n                    failover_region integer NOT NULL,\n                    http_code integer,\n                    insertedon time without time zone\n                );\n      \
                    \          "
                  - "\n                CREATE TABLE IF NOT EXISTS failoverevents (\n                    event integer NOT NULL,\n                    insertedon timestamp without time zone NOT NULL\n           \
                    \     );\n                "
              ServiceToken: !GetAtt 'DatabasePreparer.Arn'
              Type: Custom::ExecuteQueriesAgainstDatabase
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          DemoDbAdminSecret:
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Admin Account for '
                  - !Ref 'MainStackName'
              KmsKeyId: !Ref 'KMSKey'
              SecretString: !Join
                - ''
                - - '{"username": "'
                  - !Ref 'DatabaseAdminUsername'
                  - '", "password": "'
                  - !Ref 'DatabaseAdminPassword'
                  - '", "database": "template1"}'
            Type: AWS::SecretsManager::Secret
          DemoDbAdminSecretArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Admin Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DemoDbAdminSecretArn
              Tier: Standard
              Type: String
              Value: !Ref 'DemoDbAdminSecret'
            Type: AWS::SSM::Parameter
          DemoDbAdminSecretAttachment:
            DependsOn:
              - DemoDbAdminSecret
              - DemoCluster
            Properties:
              SecretId: !Ref 'DemoDbAdminSecret'
              TargetId: !Ref 'DemoCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          DemoDbClusterArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional Demo DB Cluster ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DemoDbClusterArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'DemoCluster.DBClusterArn'
            Type: AWS::SSM::Parameter
          DemoDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional Demo DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DemoDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'DemoCluster'
            Type: AWS::SSM::Parameter
          DemoDbClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Reader Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DemoDbClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'DemoCluster.ReadEndpoint.Address'
            Type: AWS::SSM::Parameter
          DemoDbClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Writer Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DemoDbClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'DemoCluster.Endpoint.Address'
            Type: AWS::SSM::Parameter
          DemoInstance1:
            DependsOn:
              - DbSubnetGroup
              - DemoCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              CACertificateIdentifier: rds-ca-rsa4096-g1
              DBClusterIdentifier: !Ref 'DemoCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          DemoInstance2:
            DependsOn:
              - DbSubnetGroup
              - DemoCluster
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              CACertificateIdentifier: rds-ca-rsa4096-g1
              DBClusterIdentifier: !Ref 'DemoCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
              PubliclyAccessible: false
            Type: AWS::RDS::DBInstance
          KMSKey:
            Properties:
              Description: !Join
                - ''
                - - 'Muli-Region KMS Key for '
                  - !Ref 'AWS::StackName'
              EnableKeyRotation: true
              Enabled: true
              KeyPolicy:
                Id: default-key-policy
                Statement:
                  - Action: kms:*
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:aws:iam::'
                          - !Ref 'AWS::AccountId'
                          - :root
                    Resource: '*'
                    Sid: Enable IAM User Permissions
                Version: '2012-10-17'
              MultiRegion: true
            Type: AWS::KMS::Key
          KmsKeyArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional KMS Key ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - KmsKeyArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'KMSKey.Arn'
            Type: AWS::SSM::Parameter
        Transform:
          Name: AWS::SecretsManager-2020-07-23
    Type: AWS::CloudFormation::StackSet
  DemoAPIDeploymentStackSet:
    Condition: DeployDemoModules
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - RegionalWafAcl
      - CoreAppStackSet
      - NetworkingStackSet
      - DemoAPIGatewayStackSet
      - DemoAPIMethods1StackSet
      - DemoAPIMethods2StackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Demo-API-Deployment'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Demo-API-Deployment
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template deploys the demo API Gateway API
          LastUpdated: May 18, 2024
          Version: v1.9
        Outputs:
          ApiHostExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -DemoApiHost
            Value: !Join
              - ''
              - - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DemoAppApiId}}
                - .execute-api.
                - !Ref 'AWS::Region'
                - .amazonaws.com/
                - v1
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          Deployment:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W68
                    reason: This API does not use API keys.
            Properties:
              Description: Initial Deployment
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Deployment
          DeploymentStage:
            DependsOn:
              - Deployment
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W69
                    reason: This API does not use API keys.
                  - id: W64
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              DeploymentId: !Ref 'Deployment'
              MethodSettings:
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: GET
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: POST
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
              StageName: v1
            Type: AWS::ApiGateway::Stage
          WafAssociation:
            DependsOn:
              - DeploymentStage
            Properties:
              ResourceArn: !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':apigateway:'
                  - !Ref 'AWS::Region'
                  - ::/restapis/
                  - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
                  - /stages/
                  - v1
              WebACLArn: !Ref 'RegionalWafAclArn'
            Type: AWS::WAFv2::WebACLAssociation
    Type: AWS::CloudFormation::StackSet
  DemoAPIGatewayStackSet:
    Condition: DeployDemoModules
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - NetworkingStackSet
      - DemoDashboardStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Demo-API-Gateway'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Demo-API-Gateway
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template provisions the demo API Gateway
          LastUpdated: May 18, 2024
          Version: v1.9
        Outputs:
          ApiRootResourceId:
            Condition: ''
            Value: !GetAtt 'Api.RootResourceId'
          CognitoAuthorizerId:
            Condition: ''
            Value: !GetAtt 'CognitoAuthorizer.AuthorizerId'
          DemoAppApiId:
            Condition: ''
            Value: !Ref 'Api'
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          Api:
            Properties:
              EndpointConfiguration:
                Types:
                  - REGIONAL
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - ' - Demo Application'
            Type: AWS::ApiGateway::RestApi
          ApiRootResourceIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway Root Resource ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - ApiRootResourceId
              Tier: Standard
              Type: String
              Value: !GetAtt 'Api.RootResourceId'
            Type: AWS::SSM::Parameter
          CognitoAuthorizer:
            Properties:
              IdentitySource: method.request.header.Authorization
              Name: Cognito-User-Pool
              ProviderARNs:
                - !Join
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':cognito-idp:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - :userpool/
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /CognitoUserPoolId}}
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
              Type: COGNITO_USER_POOLS
            Type: AWS::ApiGateway::Authorizer
          CognitoAuthorizerIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Cognito API Authorizer ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - CognitoAuthorizerId
              Tier: Standard
              Type: String
              Value: !GetAtt 'CognitoAuthorizer.AuthorizerId'
            Type: AWS::SSM::Parameter
          DEFAULT4XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_4XX
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::GatewayResponse
          DEFAULT5XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_5XX
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::GatewayResponse
          DemoAppApiIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DemoAppApiId
              Tier: Standard
              Type: String
              Value: !Ref 'Api'
            Type: AWS::SSM::Parameter
    Type: AWS::CloudFormation::StackSet
  DemoAPIMethods1StackSet:
    Condition: DeployDemoModules
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CoreAppStackSet
      - NetworkingStackSet
      - DemoAPIGatewayStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Demo-API-Methods-1'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Demo-API-Methods-1
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template provisions the demo API methods and handlers
          LastUpdated: May 18, 2024
          Version: v1.9
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          CalculateRecoveryTime:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\n\
                  import multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs\
                  \ = db_conn.cursor()\n    \n    curs.execute('''\n        SELECT\n            DATE_PART('second', max(insertedon)::time - min(insertedon)::time) AS rto\n        FROM dataclient \n        WHERE\
                  \ http_code = 500 \n        GROUP BY http_code\n    ''');\n    \n    client_events = curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n    records_to_return = []\n    \n    for\
                  \ client_event in client_events:\n    \n        c = 0\n        temp2 = {}\n        \n        for col in curs.description:\n            \n            temp2.update({str(col[0]): client_event[c]})\n\
                  \            c += 1\n        \n        records_to_return.append(temp2)\n    \n    return {\n        'code': 200,\n        'body': json.dumps(records_to_return, default = str),\n    }"
              Description: Retrieves the resolved RTO
              Environment:
                Variables:
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'CalculateRecoveryTimeRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          CalculateRecoveryTimeLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - CalculateRecoveryTime
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'CalculateRecoveryTime'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          CalculateRecoveryTimeMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'CalculateRecoveryTime.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getRecoveryTime
              ResourceId: !Ref 'CalculateRecoveryTimeResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          CalculateRecoveryTimeMethodInvocationPermission:
            DependsOn:
              - CalculateRecoveryTime
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'CalculateRecoveryTime.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - calculate-recovery-time
            Type: AWS::Lambda::Permission
          CalculateRecoveryTimeResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: calculate-recovery-time
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          CalculateRecoveryTimeResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'CalculateRecoveryTimeResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          CalculateRecoveryTimeRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          GetClientTraffic:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\t\
                  \nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\t\nfrom datetime import timedelta\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n\
                  \    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n\
                  \        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database\
                  \ = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n    \n    curs = db_conn.cursor()\t\n    \n    curs.execute('''\n        SELECT\n            insertedon,\n          \
                  \  sum(CASE WHEN http_code = 200 THEN 1 ELSE 0 END)\n        FROM dataclient\n        WHERE http_code != 0\n        GROUP BY insertedon\n        ORDER BY insertedon DESC \n        LIMIT 15\n \
                  \   ''')\n    \n    traffic_records = curs.fetchall()\n    \n    curs.close()\t\n    db_conn.close()\n    \n    data_arr = []\t\n    label_arr = []\n    \n    '''\n        For each traffic record\
                  \ found\n    '''\n    for record in reversed(traffic_records):\n        \n        data_arr.append(str(record[1]))\n        label_arr.append(str(record[0]))\n    \n    if len(label_arr) > 0:\n\
                  \        \n        for n in range(len(label_arr) + 1, 16):\t\n            \n            data_arr.insert(0, '0')\n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\n\
                  \    \n    #custom_functions.add_time(label_arr, data_arr)\n        \n    return {\n        'code': 200,\n        'body': json.dumps([{\n            'data': ','.join(data_arr),\n            'labels':\
                  \ ','.join(label_arr),\n        }])\n    }"
              Description: Retrieves client traffic logs from the database
              Environment:
                Variables:
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'GetClientTrafficRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetClientTrafficLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetClientTraffic
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetClientTraffic'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetClientTrafficMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetClientTraffic.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getClientTraffic
              ResourceId: !Ref 'GetClientTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GetClientTrafficMethodInvocationPermission:
            DependsOn:
              - GetClientTraffic
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetClientTraffic.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - get-client-traffic
            Type: AWS::Lambda::Permission
          GetClientTrafficResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-client-traffic
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          GetClientTrafficResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetClientTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GetClientTrafficRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          GetFailoverEvents:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\n\
                  import multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n        \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \    \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs\
                  \ = db_conn.cursor()\n    \n    curs.execute('''\n        SELECT \n            event,\n            to_char(insertedon,'HH24:MI:SS') AS time, \n            insertedon \n        FROM failoverevents\n\
                  \        ORDER BY insertedon\n    ''');\n    \n    failover_events = curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n    records_to_return = []\n    \n    for x in failover_events:\n\
                  \    \n        c = 0\n        temp2 = {}\n        \n        for col in curs.description:\n            \n            temp2.update({str(col[0]): x[c]})\n            c += 1\n        \n        records_to_return.append(temp2)\n\
                  \    \n    return {\n        'code': 200,\n        'body': json.dumps(records_to_return, default = str)\n    }"
              Description: Retrieves failover events from the database
              Environment:
                Variables:
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'GetFailoverEventsRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetFailoverEventsLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetFailoverEvents
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetFailoverEvents'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetFailoverEventsMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetFailoverEvents.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getFailoverEvents
              ResourceId: !Ref 'GetFailoverEventsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GetFailoverEventsMethodInvocationPermission:
            DependsOn:
              - GetFailoverEvents
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetFailoverEvents.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - get-failover-events
            Type: AWS::Lambda::Permission
          GetFailoverEventsResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-failover-events
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          GetFailoverEventsResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetFailoverEventsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GetFailoverEventsRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          InitiateFailover:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\n\
                  import psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\
                  \ndef trigger_failover():\n    \n    try:\n        \n        boto3.client('rds').failover_db_cluster(\n            DBClusterIdentifier = os.environ['APP_DB_CLUSTER_IDENTIFIER']\n        )\n  \
                  \      \n    except boto3_client_error as e:\n        raise Exception('Failed to Initiate Cluster Failover: ' + str(e))\n        \ndef log_failover_event():\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \    \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n\n    curs = db_conn.cursor()\n\
                  \    \n    curs.execute('''\n        INSERT INTO failoverevents (event, insertedon) \n            VALUES (1, %s)\n    ''', (\n        datetime.datetime.now().strftime(\"%m/%d/%Y %H:%M:%S\"), \n\
                  \    ))\n    \n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n    \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    trigger_failover()\n\n    log_failover_event()\n\
                  \    \n    return {\n        'code': 200,\n        'body': []\n    }"
              Description: Logs failover events
              Environment:
                Variables:
                  APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterIdentifier}}
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'InitiateFailoverRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          InitiateFailoverLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - InitiateFailover
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'InitiateFailover'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          InitiateFailoverMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'InitiateFailover.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getInitiateFailover
              ResourceId: !Ref 'InitiateFailoverResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          InitiateFailoverMethodInvocationPermission:
            DependsOn:
              - InitiateFailover
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'InitiateFailover.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - initiate-failover
            Type: AWS::Lambda::Permission
          InitiateFailoverResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: initiate-failover
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          InitiateFailoverResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'InitiateFailoverResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          InitiateFailoverRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:FailoverDBCluster
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbClusterArn}}
                        Sid: InitiateClusterFailover
                  PolicyName: initiate-cluster-failover
            Type: AWS::IAM::Role
    Type: AWS::CloudFormation::StackSet
  DemoAPIMethods2StackSet:
    Condition: DeployDemoModules
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CoreAppStackSet
      - NetworkingStackSet
      - DemoAPIGatewayStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Demo-API-Methods-2'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Demo-API-Methods-2
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template provisions the demo API methods and handlers
          LastUpdated: May 18, 2024
          Version: v1.9
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          ClientEmulator:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport uuid\n\
                  import psycopg2\nimport datetime\nimport dateutil.tz\nimport urllib.request\nimport multi_region_db\nfrom botocore.vendored import requests\n\ncustom_functions = multi_region_db.Functions()\n\
                  \        \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    guid = uuid.uuid4()\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n\n    curs = db_conn.cursor()\n\
                  \    \n    curs.execute('''\n        INSERT INTO dataclient (guid, primary_region, failover_region, http_code, insertedon) \n            VALUES (%s, 0, 0, 0, %s)\n    ''', (\n        str(guid),\n\
                  \        datetime.datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\")\n    ))\n    \n    db_conn.commit()\n    \n    http_code = 200\n    http_content = ''\n\n    print('END guid: ' + str(guid))\n\
                  \n    try:\n        \n        # nosemgrep - No subject to user input (Semgrep)\n        res = urllib.request.urlopen(\n            urllib.request.Request(\n                url = 'https://' + os.environ['PUBLIC_APP_URL']\
                  \ + '?guid=' + str(guid), # nosec - Not subject to user input (Bandit)\n                method = 'GET',\n            ),\n            timeout = 5\n        )\n        \n        http_code = res.status\n\
                  \        http_content = res.read().decode()\n        \n    except Exception as e:\n        http_code = 500\n        print('Client Web Request Failed :' + str(e))\n\n    try: \n\n        if http_code\
                  \ > 200:\n            http_content = ''\n            \n        print(http_code)\n            \n        curs = db_conn.cursor()\n        \n        curs.execute('''\n            UPDATE dataclient\
                  \ SET\n                http_code = %s\n            WHERE guid = %s\n        ''', (\n            http_code,\n            str(guid)\n        ))\n        \n        db_conn.commit()\n        \n  \
                  \  except Exception as ex:\n        http_code = 500\n        print('Failed to Update Client Request: ' + str(ex) + ' - HTTP Content: \"' + http_content + '\"')\n    \n    curs.close()\n    db_conn.close()\n\
                  \    \n    return True"
              Description: Emulates legitimate client traffic
              Environment:
                Variables:
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
                  PUBLIC_APP_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /CoreAppUrl}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'ClientEmulatorRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          ClientEmulatorLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - ClientEmulator
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'ClientEmulator'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          ClientEmulatorRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          ClientEmulatorTopicSubscription:
            DependsOn:
              - ClientEmulator
              - TestTrafficTopic
              - TestTrafficTopicPermission
            Properties:
              Endpoint: !GetAtt 'ClientEmulator.Arn'
              Protocol: lambda
              TopicArn: !Ref 'TestTrafficTopic'
            Type: AWS::SNS::Subscription
          GenerateSampleTraffic:
            DependsOn:
              - GenerateSampleTrafficRole
              - TestTrafficTopic
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport os\nimport time\nimport json\nimport boto3\n\ndef handler(event, context):\n\
                  \    \n    print(json.dumps(event))\n\n    sns_client = boto3.client('sns')\n    \n    for i in range(0, 3000):\n        \n        sns_client.publish(\n            Message = 'Message #: ' + str(i),\n\
                  \            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\n        )\n        \n        time.sleep(0.05)\n    \n    return {\n        'code': 200,\n        'body': json.dumps([])\n    }\n"
              Description: Generates test client traffic
              Environment:
                Variables:
                  TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'GenerateSampleTrafficRole.Arn'
              Runtime: python3.9
              Timeout: 900
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GenerateSampleTrafficLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GenerateSampleTraffic
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GenerateSampleTraffic'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GenerateSampleTrafficMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GenerateSampleTraffic.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getTrafficGenerator
              ResourceId: !Ref 'GenerateSampleTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GenerateSampleTrafficMethodInvocationPermission:
            DependsOn:
              - GenerateSampleTraffic
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GenerateSampleTraffic.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - generate-sample-traffic
            Type: AWS::Lambda::Permission
          GenerateSampleTrafficResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: generate-sample-traffic
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          GenerateSampleTrafficResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GenerateSampleTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GenerateSampleTrafficRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies: []
            Type: AWS::IAM::Role
          GenerateSampleTrafficRoleGenerateTestTrafficPolicy:
            DependsOn:
              - GenerateSampleTrafficRole
              - TestTrafficTopic
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - sns:Publish
                    Effect: Allow
                    Resource:
                      - !Ref 'TestTrafficTopic'
                    Sid: SendMessagesToSNS
              PolicyName: generate-test-traffic
              Roles:
                - !Ref 'GenerateSampleTrafficRole'
            Type: AWS::IAM::Policy
          GetEnvironmentData:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\n\
                  import psycopg2\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\napp_db_credentials = custom_functions.get_db_credentials('App')\n\
                  \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    env_data = {\n        'clusterInfo': {}\n    }\n    \n    rds_client = boto3.client('rds')\n    sqs_client = boto3.client('sqs')\n\
                  \    \n    ######################\n    #### CLUSTER INFO ####\n    ######################\n\n    cluster_resp = rds_client.describe_db_clusters(\n        DBClusterIdentifier = os.environ['APP_DB_CLUSTER_IDENTIFIER']\n\
                  \    )\n        \n    for member in cluster_resp['DBClusters'][0]['DBClusterMembers']:\n        \n        instance_resp = rds_client.describe_db_instances(\n            DBInstanceIdentifier =\
                  \ member['DBInstanceIdentifier']\n        )\n        \n        instance_data = {\n            'az': instance_resp['DBInstances'][0]['AvailabilityZone'],\n            'type': 'WRITER' if member['IsClusterWriter']\
                  \ is True else 'READER'\n        }\n        \n        try:\n            \n            db_conn = psycopg2.connect(\n                host = instance_resp['DBInstances'][0]['Endpoint']['Address'],\n\
                  \                port = app_db_credentials['port'],\n                user = app_db_credentials['username'],\n                password = app_db_credentials['password'],\n                database\
                  \ = app_db_credentials['database'],\n                connect_timeout = 3,\n                sslmode = 'require',\n            )\n            \n            curs = db_conn.cursor()\n            \n\
                  \            curs.execute('''\n                SELECT\n                    COUNT(*) AS count\n                FROM dataserver\n            ''');\n            \n            instance_records = curs.fetchone()\n\
                  \            \n            instance_data['records'] = instance_records[0]\n    \n            curs.close()\n            db_conn.close()\n            \n        except psycopg2.OperationalError as\
                  \ err:\n            \n            instance_data['records'] = 'N/A - Offline'\n        \n        env_data['clusterInfo'][member['DBInstanceIdentifier']] = instance_data\n    \n    ##############################\n\
                  \    #### QUEUE MESSAGE COUNTS ####\n    ##############################\n    \n    try:\n        \n        pending_writes_queue_resp = sqs_client.get_queue_attributes(\n            QueueUrl =\
                  \ os.environ['PENDING_WRITES_QUEUE_URL'],\n            AttributeNames = [\n                'ApproximateNumberOfMessages',\n                'ApproximateNumberOfMessagesNotVisible',\n          \
                  \  ]\n        )\n        \n        attrs = pending_writes_queue_resp['Attributes']\n        \n        env_data['MessagesInPendingWritesQueue'] = int(attrs['ApproximateNumberOfMessages']) + int(attrs['ApproximateNumberOfMessagesNotVisible'])\n\
                  \        \n        pending_writes_dl_queue_resp = sqs_client.get_queue_attributes(\n            QueueUrl = os.environ['PENDING_WRITES_DL_QUEUE_URL'],\n            AttributeNames = [\n        \
                  \        'ApproximateNumberOfMessages',\n                'ApproximateNumberOfMessagesNotVisible',\n            ]\n        )\n        \n        attrs = pending_writes_dl_queue_resp['Attributes']\n\
                  \        \n        env_data['MessagesInPendingWritesDeadLetterQueue'] = int(attrs['ApproximateNumberOfMessages']) + int(attrs['ApproximateNumberOfMessagesNotVisible'])\n        \n    except boto3_client_error\
                  \ as e:\n        raise Exception('Failed to Retrieve Queue Attributes: ' + str(e))\n    \n    return {\n        'code': 200,\n        'body': json.dumps(env_data)\n    }"
              Description: Retrieves data about DB instances, SQS queues, and other resources for use on the dashboard
              Environment:
                Variables:
                  APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterIdentifier}}
                  APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbAdminSecretArn}}
                  PENDING_WRITES_DL_QUEUE_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PendingWritesDBDeadLetterQueueUrl}}
                  PENDING_WRITES_QUEUE_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PendingWritesDBQueueUrl}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'GetEnvironmentDataRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetEnvironmentDataLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetEnvironmentData
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetEnvironmentData'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetEnvironmentDataMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetEnvironmentData.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getEnvironmentData
              ResourceId: !Ref 'GetEnvironmentDataResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GetEnvironmentDataMethodInvocationPermission:
            DependsOn:
              - GetEnvironmentData
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetEnvironmentData.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - get-environment-data
            Type: AWS::Lambda::Permission
          GetEnvironmentDataResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-environment-data
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          GetEnvironmentDataResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetEnvironmentDataResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          GetEnvironmentDataRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DescribeDBClusters
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbClusterArn}}
                        Sid: DescribeRDSClusters
                  PolicyName: get-db-clusters
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DescribeDBInstances
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:rds:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :db*
                        Sid: DescribeDBInstances
                  PolicyName: get-db-instances
                - PolicyDocument:
                    Statement:
                      - Action:
                          - sqs:GetQueueAttributes
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /PendingWritesDBQueueArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /PendingWritesDBDeadLetterQueueArn}}
                        Sid: DescribeDBInstances
                  PolicyName: get-queue-attributes
            Type: AWS::IAM::Role
          ResetDemoEnvironment:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\n\
                  import psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\nfrom botocore.exceptions import ClientError as boto3_client_error\n\nsqs_client = boto3.client('sqs')\n\
                  \ncustom_functions = multi_region_db.Functions()\n\ndef prune_db_tables(db_identifier, table_names):\n    \n    db_credentials = custom_functions.get_db_credentials(db_identifier)\n    \n    db_conn\
                  \ = psycopg2.connect(\n        host = os.environ[db_identifier.upper() + '_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = db_credentials['port'],\n        user = db_credentials['username'],\n \
                  \       sslmode = 'require',\n        password = db_credentials['password'],\n        database = db_credentials['database'],\n        connect_timeout = 3,\n    )\n    \n    for table_to_prune\
                  \ in table_names:\n        \n        curs = db_conn.cursor()\n        \n        # nosemgrep - Not subject to user input (Semgrep)\n        curs.execute('DELETE FROM ' + table_to_prune) # nosec\
                  \ - Not subject to user input (Bandit)\n        \n        db_conn.commit()\n        \n    curs.close()\n    db_conn.close()\n    \n    return True\n    \ndef purge_sqs_queue(queue_url):\n    \n\
                  \    try:\n        \n        sqs_client.purge_queue(\n            QueueUrl = queue_url,\n        )\n    \n    except boto3_client_error as e:\n        raise Exception('Failed to Purgue Queue:\
                  \ ' + str(e))\n        \n    return True\n\n'''\n    It is expected that this function will be run in the PRIMARY AWS region\n'''\ndef handler(event, context):\n    \n    prune_db_tables('App',\
                  \ ['dataserver'])\n    prune_db_tables('Demo', ['dataclient', 'failoverevents'])\n    \n    purge_sqs_queue(os.environ['PENDING_WRITES_QUEUE_URL'])\n    purge_sqs_queue(os.environ['PENDING_WRITES_DL_QUEUE_URL'])\n\
                  \    \n    return {\n        'code': 200,\n        'body': json.dumps([])\n    }"
              Description: Resets the demo environment
              Environment:
                Variables:
                  APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterReaderEndpoint}}
                  APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterWriterEndpoint}}
                  APP_DB_PROXY_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - AppDbProxyReaderEndpoint}}
                  APP_DB_PROXY_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - AppDbProxyWriterEndpoint}}
                  APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbAdminSecretArn}}
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
                  PENDING_WRITES_DL_QUEUE_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PendingWritesDBDeadLetterQueueUrl}}
                  PENDING_WRITES_QUEUE_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PendingWritesDBQueueUrl}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'
              Runtime: python3.9
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          ResetDemoEnvironmentLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - ResetDemoEnvironment
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'ResetDemoEnvironment'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          ResetDemoEnvironmentMethod:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W59
                    reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.
            Properties:
              ApiKeyRequired: false
              AuthorizationType: COGNITO_USER_POOLS
              AuthorizerId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /CognitoAuthorizerId}}
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'ResetDemoEnvironment.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              OperationName: getResetDemoEnvironment
              ResourceId: !Ref 'ResetDemoEnvironmentResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          ResetDemoEnvironmentMethodInvocationPermission:
            DependsOn:
              - ResetDemoEnvironment
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoAppApiId}}
                  - /*/
                  - GET
                  - /
                  - reset-demo-environment
            Type: AWS::Lambda::Permission
          ResetDemoEnvironmentResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: reset-demo-environment
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Resource
          ResetDemoEnvironmentResourceOptionsMethod:
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token,x-api-key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'ResetDemoEnvironmentResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /DemoAppApiId}}
            Type: AWS::ApiGateway::Method
          ResetDemoEnvironmentRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - sqs:PurgeQueue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /PendingWritesDBQueueArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /PendingWritesDBDeadLetterQueueArn}}
                  PolicyName: purge-sqs-queues
            Type: AWS::IAM::Role
          TestTrafficTopic:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W47
                    reason: This resource supports an ephemeral demo environment and does not contain sensitive data.
            Type: AWS::SNS::Topic
          TestTrafficTopicPermission:
            DependsOn:
              - ClientEmulator
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'ClientEmulator'
              Principal: sns.amazonaws.com
              SourceAccount: !Ref 'AWS::AccountId'
              SourceArn: !Ref 'TestTrafficTopic'
            Type: AWS::Lambda::Permission
    Type: AWS::CloudFormation::StackSet
  DemoDashboardStackSet:
    Condition: DeployDemoModules
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - NetworkingStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Demo-Dashboard'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - us-east-1
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Demo-Dashboard
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template deploys the demo CloudFront Distrubtion and dashboard
          LastUpdated: May 18, 2024
          Version: v1.9
        Outputs:
          CloudFrontCdnWebsiteExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -CognitoClientId
            Value: !GetAtt 'Authentication.Outputs.ClientId'
          CognitoClientIdExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -DashboardWebsite
            Value: !GetAtt 'Authentication.Outputs.WebsiteUrl'
          CognitoUserPoolId:
            Condition: ''
            Value: !GetAtt 'Authentication.Outputs.UserPoolId'
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          Authentication:
            Properties:
              Location:
                ApplicationId: arn:aws:serverlessrepo:us-east-1:520945424137:applications/cloudfront-authorization-at-edge
                SemanticVersion: 2.1.8
              Parameters:
                CreateCloudFrontDistribution: true
                DefaultRootObject: index.html
                EmailAddress: !Ref 'DemoDashboardUserEmail'
                HttpHeaders: >-
                  {"Strict-Transport-Security": "max-age=31536000; includeSubdomains; preload", "Referrer-Policy": "same-origin", "X-XSS-Protection": "1; mode=block", "X-Frame-Options": "DENY", "X-Content-Type-Options":
                  "nosniff"}
            Type: AWS::Serverless::Application
          CognitoUserPoolIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Cognito User Pool ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - CognitoUserPoolId
              Tier: Standard
              Type: String
              Value: !GetAtt 'Authentication.Outputs.UserPoolId'
            Type: AWS::SSM::Parameter
          DashboardCodeDeployer:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W89
                    reason: This function run once to set up the environment, and is invoked before the VPC is provisioned.
                  - id: W84
                    reason: These logs do not contain sensitive data.
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys,subprocess\nsubprocess.call('pip install urllib3<2 cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\nsys.path.insert(1,'/tmp/')\n\
                  import os,json,glob,boto3,shutil,urllib3,zipfile,mimetypes,cfnresponse\nfrom collections import defaultdict\nfrom botocore.exceptions import ClientError as boto3_client_error\nhttp=urllib3.PoolManager()\n\
                  try:from urllib2 import HTTPError,build_opener,HTTPHandler,Request\nexcept ImportError:from urllib.error import HTTPError;from urllib.request import build_opener,HTTPHandler,Request\n'\\n    -\
                  \ CodeBucketName | str\\n    - CodeDownloadUrl | str\\n    - CognitoClientId | str\\n'\ndef handler(event,context):\n\tT='VersionId';S='Key';R='RequestType';K='CodeBucketName';B=context;A=event;print(json.dumps(A));E=A['ResourceProperties']['Properties'];F=boto3.client('s3');C={}\n\
                  \tif A[R]in['Create','Update']:\n\t\tG='/tmp/demo_ui_code.zip';L=G.replace('.zip','');'\\n            Download the codebase\\n        ';U=urllib3.PoolManager();H=U.request('GET',E['CodeDownloadUrl'],preload_content=False,headers={'Cookie':'_gh_sess={};\
                  \ user_session={}'.format(os.environ['GITHUB_GH_SESSION_COOKIE'],os.environ['GITHUB_USER_SESSION_COOKIE'])})\n\t\tif H.status!=200:print('Failed to Download Demo UI Code: HTTP Code '+str(H.status));return\
                  \ cfnresponse.send(A,B,cfnresponse.FAILED,C)\n\t\twith H as V,open(G,'wb')as W:shutil.copyfileobj(V,W)\n\t\t'\\n            Unzip the downloaded code\\n        '\n\t\twith zipfile.ZipFile(G,'r')as\
                  \ X:X.extractall(L)\n\t\tM='/demo/dashboard-ui/';'\\n            For each file in the local code directory\\n        '\n\t\tfor D in glob.iglob(L+'**/**',recursive=True):\n\t\t\t\"\\n        \
                  \        If it's one of the dashboard files and it's a file, not a directory, we'll upload it to S3\\n            \"\n\t\t\tif M in D and os.path.isfile(D):\n\t\t\t\t\"\\n                    If\
                  \ it's the index file, we need to add the Cognito Client ID to help authenticate Demo API requests.\\n                ''\\n                if file_path[-10:] == 'index.html':\\n              \
                  \      \\n                    with open(file_path, 'r') as file:\\n                        file_contents = file.read()\\n\\n                    file_contents = file_contents.replace('{{COGNITO_CLIENT_ID}}',\
                  \ arguments['CognitoClientId'])\\n\\n                    with open(file_path, 'w') as file:\\n                        file.write(file_contents)\\n\\n                    print('Added Cognito Client\
                  \ ID to Demo UI Index File: ' + file_path)\\n                \"\n\t\t\t\ttry:Y=D.split(M)[1];F.upload_file(D,E[K],Y,ExtraArgs={'ContentType':mimetypes.guess_type(D)[0]})\n\t\t\t\texcept boto3_client_error\
                  \ as I:print('Failed to Upload Dashboard File: '+str(I));return cfnresponse.send(A,B,cfnresponse.FAILED,C)\n\telif A[R]in['Delete']:\n\t\treturn cfnresponse.send(A,B,cfnresponse.SUCCESS,C);\"\\\
                  n            Here, we'll delete all objects, versions, and delete markers from the bucket.\\n        \";Z=F.get_paginator('list_object_versions');J=[]\n\t\tfor N in Z.paginate(Bucket=E[K]):\n\t\
                  \t\tfor O in['Versions','DeleteMarkers']:\n\t\t\t\tif O in N:\n\t\t\t\t\tfor P in N[O]:J.append({S:P[S],T:P[T]})\n\t\tfor Q in range(0,len(J),1000):\n\t\t\ttry:a=F.delete_objects(Bucket=E[K],Delete={'Objects':J[Q:Q+1000],'Quiet':True})\n\
                  \t\t\texcept boto3_client_error as I:print('Failed to Delete S3 Objects: '+str(I));return cfnresponse.send(A,B,cfnresponse.FAILED,C)\n\treturn cfnresponse.send(A,B,cfnresponse.SUCCESS,C)"
              Description: Downloads dashboard code from a remote repo and deploys it to Amazon S3
              Environment:
                Variables:
                  CODE_BUCKET_NAME: !GetAtt 'Authentication.Outputs.S3Bucket'
                  CODE_DOWNLOAD_URL: !Ref 'CodeDownloadUrl'
                  GITHUB_GH_SESSION_COOKIE: !Ref 'GitHubGhSessionValue'
                  GITHUB_USER_SESSION_COOKIE: !Ref 'GitHubUserSessionValue'
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'DashboardCodeDeployerRole.Arn'
              Runtime: python3.9
              Timeout: 30
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          DashboardCodeDeployerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - DashboardCodeDeployer
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DashboardCodeDeployer'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DashboardCodeDeployerResource:
            DependsOn:
              - Authentication
              - DashboardCodeDeployer
              - DashboardCodeDeployerLogGroup
            Properties:
              Properties:
                CodeBucketName: !GetAtt 'Authentication.Outputs.S3Bucket'
                CodeDownloadUrl: !Ref 'CodeDownloadUrl'
                Version: '1.13'
              ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'
              Type: Custom::DeployDashboardCode
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          DashboardCodeDeployerRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - s3:PutObject
                          - s3:ListBucket
                          - s3:DeleteObject
                          - s3:ListBucketVersions
                          - s3:DeleteObjectVersion
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:s3:::'
                              - !GetAtt 'Authentication.Outputs.S3Bucket'
                          - !Join
                            - ''
                            - - 'arn:aws:s3:::'
                              - !GetAtt 'Authentication.Outputs.S3Bucket'
                              - /*
                        Sid: PutS3Objects
                  PolicyName: main-policy
            Type: AWS::IAM::Role
        Transform: AWS::Serverless-2016-10-31
    Type: AWS::CloudFormation::StackSet
  FailoverHandlersStackSet:
    Condition: ''
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CoreAppStackSet
      - DatabasesStackSet
      - NetworkingStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Failover-Handlers'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Failover-Handlers
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template deploys the handles that facilitate the demo failover tracking.
          LastUpdated: May 18, 2024
          Version: v1.9
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          FailoverCompletedEventListener:
            DependsOn:
              - FailoverCompletedHandler
            Properties:
              Description: Invokes Handler When Failover is Completed
              EventPattern:
                detail:
                  EventID:
                    - RDS-EVENT-0071
                  SourceArn:
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /AppDbClusterArn}}
                detail-type:
                  - RDS DB Cluster Event
                source:
                  - aws.rds
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverCompletedHandler.Arn'
                  Id: FailoverCompletedHandler
            Type: AWS::Events::Rule
          FailoverCompletedHandler:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: These logs do not contain sensitive data.
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\n\
                  import psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom botocore.exceptions import ClientError as boto3_client_error\n\n\
                  custom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \n    db_conn = psycopg2.connect(\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n    \n    '''\n  \
                  \  curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (3,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n\
                  \        \n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (4,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n\
                  \    db_conn.commit()\n    '''\n    \n    '''\n        Logs Failover Completion\n    '''\n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        INSERT INTO failoverevents (event, insertedon)\
                  \ \n            VALUES (3, %s)\n    ''', (\n        datetime.now().strftime(\"%m/%d/%Y %H:%M:%S\"), \n    ))\n    \n    db_conn.commit()\n        \n    curs.close()\n    db_conn.close()\n    \n\
                  \    return True"
              Description: Processes failover completed events
              Environment:
                Variables:
                  APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterIdentifier}}
                  APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterReaderEndpoint}}
                  APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterWriterEndpoint}}
                  APP_DB_PROXY_NAME: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - AppDbProxyName}}
                  APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbAdminSecretArn}}
                  DEMO_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterReaderEndpoint}}
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
                  PUBLIC_APP_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /CoreAppUrl}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'FailoverCompletedHandlerRole.Arn'
              Runtime: python3.9
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          FailoverCompletedHandlerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - FailoverCompletedHandler
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverCompletedHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverCompletedHandlerPermission:
            DependsOn:
              - FailoverCompletedHandler
              - FailoverCompletedEventListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverCompletedHandler'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'FailoverCompletedEventListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverCompletedHandlerRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:RegisterDBProxyTargets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbProxyArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbClusterArn}}
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - rds
                              - !Ref 'AWS::Region'
                              - !Ref 'AWS::AccountId'
                              - target-group
                              - '*'
                        Sid: RegisterProxyTargets
                  PolicyName: register-proxy-targets
            Type: AWS::IAM::Role
          FailoverStartedEventListener:
            DependsOn:
              - FailoverStartedHandler
            Properties:
              Description: Invokes Handler When Failover is Started
              EventPattern:
                detail:
                  EventID:
                    - RDS-EVENT-0073
                  SourceArn:
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /AppDbClusterArn}}
                detail-type:
                  - RDS DB Cluster Event
                source:
                  - aws.rds
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverStartedHandler.Arn'
                  Id: FailoverStartedHandler
            Type: AWS::Events::Rule
          FailoverStartedHandler:
            DependsOn: []
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: These logs do not contain sensitive data.
                  - id: W92
                    reason: This function is used to support the demo environment and does not require provisioned concurrency.
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\n\
                  import psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\
                  \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host\
                  \ = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n\
                  \        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n        sslmode = 'require',\n    )\n\n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        INSERT\
                  \ INTO failoverevents (event, insertedon) \n            VALUES (2, %s)\n    ''', (\n        datetime.datetime.now(),\n    ))\n    \n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n\
                  \    \n    return True"
              Description: Processes failover started events
              Environment:
                Variables:
                  APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterIdentifier}}
                  APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterReaderEndpoint}}
                  APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbClusterWriterEndpoint}}
                  APP_DB_PROXY_NAME: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - AppDbProxyName}}
                  APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /AppDbAdminSecretArn}}
                  DEMO_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterReaderEndpoint}}
                  DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbClusterWriterEndpoint}}
                  DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /DemoDbAdminSecretArn}}
                  PUBLIC_APP_URL: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /CoreAppUrl}}
              Handler: index.handler
              Layers:
                - !Ref 'LambdaLayerArn'
              MemorySize: 128
              Role: !GetAtt 'FailoverStartedHandlerRole.Arn'
              Runtime: python3.9
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          FailoverStartedHandlerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - FailoverStartedHandler
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W84
                    reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverStartedHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverStartedHandlerPermission:
            DependsOn:
              - FailoverStartedHandler
              - FailoverStartedEventListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverStartedHandler'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'FailoverStartedEventListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverStartedHandlerRole:
            DependsOn: []
            Metadata: {}
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /DemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /KmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:RegisterDBProxyTargets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbProxyArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /AppDbClusterArn}}
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - rds
                              - !Ref 'AWS::Region'
                              - !Ref 'AWS::AccountId'
                              - target-group
                              - '*'
                        Sid: RegisterProxyTargets
                  PolicyName: register-proxy-targets
            Type: AWS::IAM::Role
    Type: AWS::CloudFormation::StackSet
  LambdaLayerCreator:
    DependsOn: []
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: This function run once to set up the environment, and is invoked before the VPC is provisioned.
          - id: W92
            reason: This function is run just once to support the demo environment and does not require provisioned concurrency.
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "_A='%H:%M:%S'\nimport sys,subprocess\nsubprocess.call('pip install urllib3<2 cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\nsys.path.insert(1,'/tmp/')\n\
          import io,os,json,boto3,shutil,cfnresponse\nfrom zipfile import ZipFile\nfrom botocore.exceptions import ClientError as boto3_client_error\ndef zip_directory(path):\n\tfor(B,F,C)in os.walk(path):\n\
          \t\tfor D in C:A=os.path.join(B,D);E=A[len(path)+len(os.sep):];yield(A,E)\ndef make_zip_file_bytes(path):\n\tA=io.BytesIO()\n\twith ZipFile(A,'w')as B:\n\t\tfor(C,D)in zip_directory(path=path):B.write(C,D)\n\
          \treturn A.getvalue()\n'\\n    - Region | str\\n    - Packages | list\\n    - LayerName | str\\n'\ndef handler(event,context):\n\tJ='RequestType';I='ResourceProperties';G='LayerName';C=context;A=event;print(json.dumps(A));B=A[I]['Properties'];N=A[I]['Type'].replace('Custom::','');D={};K=boto3.Session(region_name=B['Region']);E=K.client('lambda')\n\
          \tif A[J]in['Create','Update']:\n\t\tsubprocess.call(('pip install '+' '.join(B['Packages'])+' -t /tmp/lambda-layer --no-cache-dir').split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL);shutil.copyfile(os.path.realpath(__file__),'/tmp/lambda-layer/multi_region_db.py')\n\
          \t\ttry:H=E.publish_layer_version(LayerName=B[G],Content={'ZipFile':make_zip_file_bytes('/tmp/lambda-layer')},CompatibleRuntimes=['python3.9'],CompatibleArchitectures=['x86_64','arm64']);return\
          \ cfnresponse.send(A,C,cfnresponse.SUCCESS,D,H['LayerVersionArn'])\n\t\texcept boto3_client_error as F:print('Failed to Deploy Lambda Layer: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\
          \tif A[J]in['Delete']:\n\t\ttry:\n\t\t\tL=E.list_layer_versions(LayerName=B[G])\n\t\t\tfor M in L['LayerVersions']:H=E.delete_layer_version(LayerName=B[G],VersionNumber=M['Version'])\n\t\texcept\
          \ boto3_client_error as F:print('Failed to Delete Layer Versions: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\t\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,D)\n\
          import dateutil.tz\nfrom datetime import datetime\nfrom datetime import timedelta\nclass Functions:\n\tdef __init__(A):''\n\tdef add_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=5)).strftime(_A)\n\
          \tdef subtract_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=-5)).strftime(_A)\n\tdef add_time(B,label,data):\n\t\tA=label;C=dateutil.tz.gettz('US/Pacific');D=datetime.now(tz=C)\n\
          \t\twhile datetime.strptime(A[len(A)-1],_A)+timedelta(seconds=9)<datetime.strptime(D.strftime(_A),_A):A.pop(0);data.pop(0);A.append(B.add_five_seconds(A[len(A)-1]));data.append('0')\n\t'\\n  \
          \      Requires \"(APP|DEMO)_DB_SECRET_ARN\" as an environment variable\\n        \\n        - db_identifier | str (App|Demo)\\n    '\n\tdef get_db_credentials(E,db_identifier):\n\t\tA=db_identifier;B=boto3.client('secretsmanager')\n\
          \t\ttry:C=B.get_secret_value(SecretId=os.environ[A.upper()+'_DB_SECRET_ARN'])\n\t\texcept boto3_client_error as D:raise Exception('Failed to Retrieve '+A+' Database Secret: '+str(D))\n\t\telse:return\
          \ json.loads(C['SecretString'])"
      Description: ''
      Handler: index.handler
      Layers: []
      MemorySize: 256
      Role: !GetAtt 'LambdaLayerCreatorRole.Arn'
      Runtime: python3.9
      Timeout: 60
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  LambdaLayerCreatorLogGroup:
    DeletionPolicy: Delete
    DependsOn:
      - LambdaLayerCreator
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'LambdaLayerCreator'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  LambdaLayerCreatorResource:
    DependsOn:
      - LambdaLayerCreatorLogGroup
    Properties:
      Properties:
        LayerName: !Ref 'AWS::StackName'
        Packages:
          - requests
          - cfnresponse
          - psycopg2-binary
        Region: !Ref 'AWS::Region'
        Version: 1.0
      ServiceToken: !GetAtt 'LambdaLayerCreator.Arn'
      Type: Custom::DeployLambdaLayer
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  LambdaLayerCreatorRole:
    DependsOn: []
    Metadata: {}
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - lambda:ListLayerVersions
                  - lambda:DeleteLayerVersion
                  - lambda:PublishLayerVersion
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - !Ref 'AWS::Partition'
                      - lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - layer
                      - !Ref 'AWS::StackName'
                  - !Join
                    - ':'
                    - - arn
                      - !Ref 'AWS::Partition'
                      - lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - layer
                      - !Ref 'AWS::StackName'
                      - '*'
                Sid: CreateAndDeleteLambdaLayers
          PolicyName: main-policy
    Type: AWS::IAM::Role
  NetworkingStackSet:
    Condition: ''
    DependsOn:
      - RegionalWafAcl
      - LambdaLayerCreatorResource
      - StackSetExecutionRole
      - StackSetAdministrationRole
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: '0-RPO Aurora Demo - Networking'
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 1
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: RegionalWafAclArn
          ParameterValue: !GetAtt 'RegionalWafAcl.Arn'
        - ParameterKey: LambdaLayerArn
          ParameterValue: !Ref 'LambdaLayerCreatorResource'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: VpcCidr
          ParameterValue: !Ref 'VpcCidr'
        - ParameterKey: PublicSubnetZoneACidr
          ParameterValue: !Ref 'PublicSubnetZoneACidr'
        - ParameterKey: PublicSubnetZoneBCidr
          ParameterValue: !Ref 'PublicSubnetZoneBCidr'
        - ParameterKey: PrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrivateSubnetZoneACidr'
        - ParameterKey: PrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrivateSubnetZoneBCidr'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: DeployDemoDashboard
          ParameterValue: !Ref 'DeployDemoDashboard'
        - ParameterKey: DemoDashboardUserEmail
          ParameterValue: !Ref 'DemoDashboardUserEmail'
        - ParameterKey: GitHubGhSessionValue
          ParameterValue: !Ref 'GitHubGhSessionValue'
        - ParameterKey: GitHubUserSessionValue
          ParameterValue: !Ref 'GitHubUserSessionValue'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'AWS::Region'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Networking
      TemplateBody: |
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This template deploys the VPC and other networking resources required to host the application
          LastUpdated: May 18, 2024
          Version: v1.9
        Outputs:
          LambdaSecurityGroupId:
            Condition: ''
            Value: !Ref 'LambdaSecurityGroup'
          PrivateRouteTableZoneAId:
            Condition: ''
            Value: !Ref 'PrivateRouteTableZoneA'
          PrivateRouteTableZoneBId:
            Condition: ''
            Value: !Ref 'PrivateRouteTableZoneB'
          PrivateSubnetZoneAId:
            Condition: ''
            Value: !Ref 'PrivateSubnetZoneA'
          PrivateSubnetZoneBId:
            Condition: ''
            Value: !Ref 'PrivateSubnetZoneB'
          PublicSubnetZoneAId:
            Condition: ''
            Value: !Ref 'PublicSubnetZoneA'
          PublicSubnetZoneBId:
            Condition: ''
            Value: !Ref 'PublicSubnetZoneB'
          VpcId:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - VpcId
            Value: !Ref 'Vpc'
        Parameters:
          CodeDownloadUrl:
            Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Default: AuroraAdmin
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          DemoDashboardUserEmail:
            Description: The email address you'll use to log into the dashboard. This is required if "Deploy Demo Dashboard" is set to "Yes".
            Type: String
          DeployDemoDashboard:
            AllowedValues:
              - 'No'
              - 'Yes'
            Default: 'Yes'
            Description: >-
              Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed
              to us-east-1, regardless of which region you deploy this stack to.
            Type: String
          GitHubGhSessionValue:
            Description: The value of your GitHub "_gh_sess" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          GitHubUserSessionValue:
            Description: The value of your GitHub "user_session" cookie. This parameter will be removed when the solution's GitHub repo is made public.
            Type: String
          LambdaLayerArn:
            Type: String
          MainStackName:
            Type: String
          PrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrivateSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PublicSubnetZoneBCidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          RegionalWafAclArn:
            Type: String
          VpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
        Resources:
          InternetGateway:
            Properties:
              Tags:
                - Key: Name
                  Value: !Ref 'AWS::StackName'
            Type: AWS::EC2::InternetGateway
          InternetGatewayVpcAssociation:
            DependsOn:
              - Vpc
              - InternetGateway
            Properties:
              InternetGatewayId: !Ref 'InternetGateway'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::VPCGatewayAttachment
          LambdaSecurityGroup:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W5
                    reason: Access to dynamic public IPs is required.
            Properties:
              GroupDescription: Lambda Security Group
              SecurityGroupEgress:
                - CidrIp: '0.0.0.0/0'
                  Description: All HTTPs Traffic
                  FromPort: 443
                  IpProtocol: tcp
                  ToPort: 443
                - CidrIp: '0.0.0.0/0'
                  Description: Database Traffic
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
              SecurityGroupIngress: []
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::SecurityGroup
          LambdaSecurityGroupIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Lambda Security Group ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - LambdaSecurityGroupId
              Tier: Standard
              Type: String
              Value: !Ref 'LambdaSecurityGroup'
            Type: AWS::SSM::Parameter
          NatGatewayZoneA:
            DependsOn:
              - PublicSubnetZoneA
              - NatGatewayZoneAElasticIp
            Properties:
              AllocationId: !GetAtt 'NatGatewayZoneAElasticIp.AllocationId'
              SubnetId: !Ref 'PublicSubnetZoneA'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - NatGatewayZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
            Type: AWS::EC2::NatGateway
          NatGatewayZoneAElasticIp:
            Properties:
              Domain: vpc
            Type: AWS::EC2::EIP
          NatGatewayZoneB:
            DependsOn:
              - PublicSubnetZoneB
              - NatGatewayZoneBElasticIp
            Properties:
              AllocationId: !GetAtt 'NatGatewayZoneBElasticIp.AllocationId'
              SubnetId: !Ref 'PublicSubnetZoneB'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - NatGatewayZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
            Type: AWS::EC2::NatGateway
          NatGatewayZoneBElasticIp:
            Properties:
              Domain: vpc
            Type: AWS::EC2::EIP
          PrivateRouteTableZoneA:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateRouteTableZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::RouteTable
          PrivateRouteTableZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ID of Private Route Table in Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateRouteTableZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateRouteTableZoneA'
            Type: AWS::SSM::Parameter
          PrivateRouteTableZoneB:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateRouteTableZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::RouteTable
          PrivateRouteTableZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ID of Private Route Table in Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateRouteTableZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateRouteTableZoneB'
            Type: AWS::SSM::Parameter
          PrivateSubnetRouteToNatGatewayZoneA:
            DependsOn:
              - NatGatewayZoneA
              - PrivateRouteTableZoneA
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'NatGatewayZoneA'
              RouteTableId: !Ref 'PrivateRouteTableZoneA'
            Type: AWS::EC2::Route
          PrivateSubnetRouteToNatGatewayZoneB:
            DependsOn:
              - NatGatewayZoneB
              - PrivateRouteTableZoneB
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'NatGatewayZoneB'
              RouteTableId: !Ref 'PrivateRouteTableZoneB'
            Type: AWS::EC2::Route
          PrivateSubnetZoneA:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !Ref 'PrivateSubnetZoneACidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateSubnetZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PrivateSubnetZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Private
                  - ' Subnet Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateSubnetZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateSubnetZoneA'
            Type: AWS::SSM::Parameter
          PrivateSubnetZoneATableAssociation:
            DependsOn:
              - Vpc
              - PrivateSubnetZoneA
              - PrivateRouteTableZoneA
            Properties:
              RouteTableId: !Ref 'PrivateRouteTableZoneA'
              SubnetId: !Ref 'PrivateSubnetZoneA'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PrivateSubnetZoneB:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !Ref 'PrivateSubnetZoneBCidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateSubnetZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PrivateSubnetZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Private
                  - ' Subnet Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateSubnetZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateSubnetZoneB'
            Type: AWS::SSM::Parameter
          PrivateSubnetZoneBTableAssociation:
            DependsOn:
              - Vpc
              - PrivateSubnetZoneB
              - PrivateRouteTableZoneB
            Properties:
              RouteTableId: !Ref 'PrivateRouteTableZoneB'
              SubnetId: !Ref 'PrivateSubnetZoneB'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PublicRouteTable:
            DependsOn:
              - Vpc
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicRouteTable-
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::RouteTable
          PublicRouteToInternet:
            DependsOn:
              - InternetGateway
              - PublicRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              GatewayId: !Ref 'InternetGateway'
              RouteTableId: !Ref 'PublicRouteTable'
            Type: AWS::EC2::Route
          PublicSubnetZoneA:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !Ref 'PublicSubnetZoneACidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicSubnetZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PublicSubnetZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Public
                  - ' Subnet Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PublicSubnetZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'PublicSubnetZoneA'
            Type: AWS::SSM::Parameter
          PublicSubnetZoneATableAssociation:
            DependsOn:
              - Vpc
              - PublicSubnetZoneA
              - PublicRouteTable
            Properties:
              RouteTableId: !Ref 'PublicRouteTable'
              SubnetId: !Ref 'PublicSubnetZoneA'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PublicSubnetZoneB:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !Ref 'PublicSubnetZoneBCidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicSubnetZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PublicSubnetZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Public
                  - ' Subnet Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PublicSubnetZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'PublicSubnetZoneB'
            Type: AWS::SSM::Parameter
          PublicSubnetZoneBTableAssociation:
            DependsOn:
              - Vpc
              - PublicSubnetZoneB
              - PublicRouteTable
            Properties:
              RouteTableId: !Ref 'PublicRouteTable'
              SubnetId: !Ref 'PublicSubnetZoneB'
            Type: AWS::EC2::SubnetRouteTableAssociation
          Vpc:
            Metadata:
              cfn_nag:
                rules_to_suppress:
                  - id: W60
                    reason: This VPC is being deployed to support an ephemeral demo environment that does not require VPC flow log analysis.
            Properties:
              CidrBlock: !Ref 'VpcCidr'
              EnableDnsHostnames: true
              EnableDnsSupport: true
              Tags:
                - Key: Name
                  Value: !Ref 'AWS::StackName'
            Type: AWS::EC2::VPC
          VpcIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'VPC for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - VpcId
              Tier: Standard
              Type: String
              Value: !Ref 'Vpc'
            Type: AWS::SSM::Parameter
    Type: AWS::CloudFormation::StackSet
  RegionalWafAcl:
    Properties:
      DefaultAction:
        Allow: {}
      Rules:
        - Name: BlockBots
          OverrideAction:
            Count: {}
          Priority: 0
          Statement:
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesBotControlRuleSet
              VendorName: AWS
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Join
              - ''
              - - !Ref 'AWS::StackName'
                - -WAF-Bot-Traffic
            SampledRequestsEnabled: true
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Join
          - ''
          - - !Ref 'AWS::StackName'
            - -WAF
        SampledRequestsEnabled: true
    Type: AWS::WAFv2::WebACL
  StackSetAdministrationRole:
    DeletionPolicy: Retain
    DependsOn:
      - StackSetExecutionRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource:
                  - !GetAtt 'StackSetExecutionRole.Arn'
          PolicyName: main-policy
    Type: AWS::IAM::Role
  StackSetExecutionRole:
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Resource names are dynamically defined downstream.
          - id: F38
            reason: Role names are dynamically defined downstream.
          - id: W76
            reason: These are the permissions required to deploy this template.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - !Ref 'AWS::AccountId'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - apigateway:GET
                  - apigateway:PUT
                  - apigateway:POST
                  - apigateway:PATCH
                  - apigateway:DELETE
                  - apigateway:CreateDeployment
                  - apigateway:CreateResource
                  - apigateway:CreateRestApi
                  - apigateway:CreateStage
                  - apigateway:DeleteDeployment
                  - apigateway:DeleteGatewayResponse
                  - apigateway:DeleteMethod
                  - apigateway:DeleteResource
                  - apigateway:DeleteRestApi
                  - apigateway:DeleteStage
                  - apigateway:GetDeployment
                  - apigateway:GetGatewayResponse
                  - apigateway:GetRestApi
                  - apigateway:GetStage
                  - apigateway:PutGatewayResponse
                  - apigateway:PutIntegration
                  - apigateway:PutIntegrationResponse
                  - apigateway:PutMethod
                  - apigateway:PutMethodResponse
                  - apigateway:SetWebACL
                  - apigateway:UpdateStage
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:CreateDistribution
                  - cloudfront:CreateDistributionWithTags
                  - cloudfront:DeleteCloudFrontOriginAccessIdentity
                  - cloudfront:DeleteDistribution
                  - cloudfront:GetCloudFrontOriginAccessIdentity
                  - cloudfront:GetDistribution
                  - cloudfront:TagResource
                  - cloudfront:UpdateDistribution
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:CreateUserPool
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:CreateUserPoolDomain
                  - cognito-idp:DeleteUserPool
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:DeleteUserPoolDomain
                  - cognito-idp:DescribeUserPool
                  - ec2:AllocateAddress
                  - ec2:AssociateRouteTable
                  - ec2:AttachInternetGateway
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateInternetGateway
                  - ec2:CreateNatGateway
                  - ec2:CreateRoute
                  - ec2:CreateRouteTable
                  - ec2:CreateSecurityGroup
                  - ec2:CreateSubnet
                  - ec2:CreateTags
                  - ec2:CreateVpc
                  - ec2:DeleteInternetGateway
                  - ec2:DeleteNatGateway
                  - ec2:DeleteRoute
                  - ec2:DeleteRouteTable
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteSubnet
                  - ec2:DeleteVpc
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:DetachInternetGateway
                  - ec2:DisassociateRouteTable
                  - ec2:ModifyVpcAttribute
                  - ec2:ReleaseAddress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:ListTargetsByRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:CreateServiceLinkedRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:TagRole
                  - kms:CreateGrant
                  - kms:CreateKey
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:EnableKeyRotation
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:GetKeyPolicy
                  - kms:GetKeyRotationStatus
                  - kms:ListResourceTags
                  - kms:PutKeyPolicy
                  - kms:ScheduleKeyDeletion
                  - lambda:AddPermission
                  - lambda:CreateEventSourceMapping
                  - lambda:CreateFunction
                  - lambda:DeleteEventSourceMapping
                  - lambda:GetLayerVersion
                  - lambda:DeleteFunction
                  - lambda:EnableReplication
                  - lambda:GetEventSourceMapping
                  - lambda:GetFunction
                  - lambda:GetFunctionCodeSigningConfig
                  - lambda:GetRuntimeManagementConfig
                  - lambda:InvokeFunction
                  - lambda:RemovePermission
                  - lambda:TagResource
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:PutRetentionPolicy
                  - rds:CreateDBCluster
                  - rds:CreateDBClusterParameterGroup
                  - rds:CreateDBInstance
                  - rds:CreateDBProxy
                  - rds:CreateDBProxyEndpoint
                  - rds:CreateDBSubnetGroup
                  - rds:DeleteDBCluster
                  - rds:DeleteDBClusterParameterGroup
                  - rds:DeleteDBInstance
                  - rds:DeleteDBProxy
                  - rds:DeleteDBProxyEndpoint
                  - rds:DeleteDBSubnetGroup
                  - rds:DeregisterDBProxyTargets
                  - rds:DescribeDBClusterParameterGroups
                  - rds:DescribeDBClusterParameters
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                  - rds:DescribeDBProxies
                  - rds:DescribeDBProxyEndpoints
                  - rds:DescribeDBProxyTargetGroups
                  - rds:DescribeDBProxyTargets
                  - rds:DescribeDBSubnetGroups
                  - rds:ListTagsForResource
                  - rds:ModifyDBClusterParameterGroup
                  - rds:RegisterDBProxyTargets
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetObject
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:PutBucketTagging
                  - s3:GetEncryptionConfiguration
                  - s3:PutEncryptionConfiguration
                  - secretsmanager:CreateSecret
                  - secretsmanager:DeleteSecret
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - serverlessrepo:CreateCloudFormationTemplate
                  - serverlessrepo:GetCloudFormationTemplate
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:GetTopicAttributes
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sqs:CreateQueue
                  - sqs:DeleteQueue
                  - sqs:GetQueueAttributes
                  - ssm:DeleteParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                  - wafv2:AssociateWebACL
                  - wafv2:DisassociateWebACL
                  - wafv2:GetWebACL
                  - wafv2:GetWebACLForResource
                Effect: Allow
                Resource:
                  - '*'
          PolicyName: main-policy
    Type: AWS::IAM::Role
