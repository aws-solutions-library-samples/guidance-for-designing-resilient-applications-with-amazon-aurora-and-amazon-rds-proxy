{
 "Conditions": {
  "DeployDemoModules": {
   "Fn::Equals": [
    {
     "Ref": "DeployDemoDashboard"
    },
    "Yes"
   ]
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "Codebase"
     },
     "Parameters": [
      "CodeDownloadUrl"
     ]
    },
    {
     "Label": {
      "default": "Database"
     },
     "Parameters": [
      "DatabaseAdminUsername",
      "DatabaseAdminPassword"
     ]
    },
    {
     "Label": {
      "default": "Networking"
     },
     "Parameters": [
      "VpcCidr",
      "PublicSubnetZoneACidr",
      "PublicSubnetZoneBCidr",
      "PrivateSubnetZoneACidr",
      "PrivateSubnetZoneBCidr"
     ]
    },
    {
     "Label": {
      "default": "Demo Application"
     },
     "Parameters": [
      "DeployDemoDashboard",
      "DemoDashboardUserEmail"
     ]
    },
    {
     "Label": {
      "default": "Temporary Testing Params"
     },
     "Parameters": [
      "GitHubGhSessionValue",
      "GitHubUserSessionValue"
     ]
    }
   ],
   "ParameterLabels": {
    "CodeDownloadUrl": {
     "default": "Download URL"
    },
    "DatabaseAdminPassword": {
     "default": "Admin Password"
    },
    "DatabaseAdminUsername": {
     "default": "Admin Username"
    },
    "DemoDashboardUserEmail": {
     "default": "Demo Dashboard User Email"
    },
    "DeployDemoDashboard": {
     "default": "Deploy Demo Dashboard"
    },
    "GitHubGhSessionValue": {
     "default": "GitHub \"_gh_sess\" Cookie"
    },
    "GitHubUserSessionValue": {
     "default": "GitHub \"user_session\" Cookie"
    },
    "PrivateSubnetZoneACidr": {
     "default": "Private Subnet Zone A CIDR"
    },
    "PrivateSubnetZoneBCidr": {
     "default": "Private Subnet Zone B CIDR"
    },
    "PublicSubnetZoneACidr": {
     "default": "Public Subnet Zone A CIDR"
    },
    "PublicSubnetZoneBCidr": {
     "default": "Public Subnet Zone B CIDR"
    },
    "VpcCidr": {
     "default": "VPC CIDR"
    }
   }
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This template deploys a 0-RPO database architecture using Amazon RDS, Amazon SQS, AWS Lambda, and Amazon API Gateway.",
  "LastUpdated": "November 30, 2023",
  "Version": "v1.6"
 },
 "Outputs": {
  "CloudWatchDashboardUrl": {
   "Description": "CloudWatch Dashboard URL",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://console.aws.amazon.com/cloudwatch/home?region=",
      {
       "Ref": "AWS::Region"
      },
      "#dashboards/dashboard/",
      {
       "Ref": "CloudWatchDashboard"
      }
     ]
    ]
   }
  },
  "DemoDashboardUrl": {
   "Condition": "DeployDemoModules",
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::GetAtt": [
        "CfnExportRetrieverResource",
        "DashboardWebsite"
       ]
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Join": [
           "",
           [
            "?apiHost=",
            {
             "Fn::GetAtt": [
              "CfnExportRetrieverResource",
              "DemoApiHost"
             ]
            }
           ]
          ]
         },
         "&region=",
         {
          "Ref": "AWS::Region"
         }
        ]
       ]
      }
     ]
    ]
   }
  }
 },
 "Parameters": {
  "CodeDownloadUrl": {
   "Default": "https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DatabaseAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DatabaseAdminUsername": {
   "Default": "AuroraAdmin",
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "DemoDashboardUserEmail": {
   "Description": "The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".",
   "Type": "String"
  },
  "DeployDemoDashboard": {
   "AllowedValues": [
    "No",
    "Yes"
   ],
   "Default": "Yes",
   "Description": "Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed to us-east-1, regardless of which region you deploy this stack to.",
   "Type": "String"
  },
  "GitHubGhSessionValue": {
   "Description": "The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "GitHubUserSessionValue": {
   "Description": "The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.",
   "Type": "String"
  },
  "PrivateSubnetZoneACidr": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrivateSubnetZoneBCidr": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneACidr": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PublicSubnetZoneBCidr": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "VpcCidr": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  }
 },
 "Resources": {
  "CfnExportRetriever": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      },
      {
       "id": "W89",
       "reason": "This function run once to set up the environment, and is invoked before the VPC is provisioned."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nimport sys\nimport subprocess\n\nsubprocess.call('pip install urllib3<2 cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL) # nosec Not subject to user input\nsys.path.insert(1, '/tmp/') # nosec Required for module import\n\nimport io\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Region | str\n    - ExportPrefix | str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n    \n    cfn_client = boto3Session.client('cloudformation')\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        try:\n            \n            response = cfn_client.list_exports()\n            \n            '''\n                For each CloudFormation export in this region\n            '''\n            for export in response['Exports']:\n            \t\n                '''\n                    If this export has the proper prefix\n                '''\n                if export['Name'].startswith(arguments['ExportPrefix']):\n                    \n                    response_data[export['Name'].replace(arguments['ExportPrefix'] + '-', '')] = export['Value']\n                \n        except ClientError as e:\n            \n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "",
    "Handler": "index.handler",
    "Layers": [],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "CfnExportRetrieverRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "PassThrough"
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "CfnExportRetrieverLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "CfnExportRetriever"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "CfnExportRetriever"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "CfnExportRetrieverResource": {
   "DependsOn": [
    "CoreAppStackSet",
    "DatabasesStackSet",
    "DemoDashboardStackSet",
    "DemoAPIDeploymentStackSet",
    "CfnExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "AWS::Region"
     },
     "Version": 1.21
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CfnExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "CfnExportRetrieverRole": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W11",
       "reason": "cloudformation:ListExports does not support more resource conditions."
      }
     ]
    }
   },
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "cloudformation:ListExports"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ],
         "Sid": "GetCFNOutputs"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "CloudWatchDashboard": {
   "DependsOn": [
    "CoreAppStackSet",
    "DatabasesStackSet",
    "CfnExportRetrieverResource"
   ],
   "Properties": {
    "DashboardBody": {
     "Fn::Sub": [
      "{\"widgets\": [{\"type\": \"metric\", \"x\": 0, \"y\": 0, \"width\": 6, \"height\": 6, \"properties\": {\"view\": \"timeSeries\", \"metrics\": [[\"AWS/RDS\", \"DatabaseConnections\", \"DBClusterIdentifier\", \"${APP_DB_CLUSTER_IDENTIFIER}\"]], \"period\": 60, \"region\": \"${AWS_REGION}\", \"title\": \"RDS Cluster - DB Connections\"}}, {\"type\": \"metric\", \"x\": 6, \"y\": 0, \"width\": 6, \"height\": 3, \"properties\": {\"metrics\": [[\"AWS/RDS\", \"DatabaseConnections\", \"ProxyName\", \"${APP_DB_PROXY_NAME}\"]], \"view\": \"timeSeries\", \"region\": \"${AWS_REGION}\", \"stat\": \"Sum\", \"period\": 60, \"title\": \"RDS Proxy - DB Connections\"}}, {\"type\": \"metric\", \"x\": 6, \"y\": 3, \"width\": 6, \"height\": 3, \"properties\": {\"view\": \"timeSeries\", \"metrics\": [[\"AWS/RDS\", \"ClientConnections\", \"ProxyName\", \"${APP_DB_PROXY_NAME}\"]], \"region\": \"${AWS_REGION}\", \"stat\": \"Sum\", \"period\": 60, \"title\": \"RDS Proxy - Client Connections\"}}, {\"type\": \"metric\", \"x\": 12, \"y\": 0, \"width\": 6, \"height\": 6, \"properties\": {\"view\": \"timeSeries\", \"metrics\": [[\"AWS/RDS\", \"AvailabilityPercentage\", \"TargetRole\", \"READWRITE\", \"ProxyName\", \"${APP_DB_PROXY_NAME}\", \"TargetGroup\", \"default\"], [\"AWS/RDS\", \"AvailabilityPercentage\", \"TargetRole\", \"READ_ONLY\", \"ProxyName\", \"${APP_DB_PROXY_NAME}\", \"TargetGroup\", \"default\"]], \"region\": \"${AWS_REGION}\", \"title\": \"RDS Proxy - Availability Percentage\", \"stat\": \"Average\", \"period\": 60}}, {\"type\": \"metric\", \"x\": 18, \"y\": 0, \"width\": 6, \"height\": 6, \"properties\": {\"metrics\": [[\"AWS/ApiGateway\", \"4XXError\", \"ApiName\", \"${AWS_REGION} - Core Application\", {\"region\": \"${AWS_REGION}\"}], [\"AWS/ApiGateway\", \"5XXError\", \"ApiName\", \"${AWS_REGION} - Core Application\", {\"region\": \"${AWS_REGION}\"}]], \"view\": \"timeSeries\", \"stacked\": false, \"region\": \"${AWS_REGION}\", \"period\": 60, \"stat\": \"Sum\", \"title\": \"Core App API Errors\"}}, {\"height\": 15, \"width\": 24, \"y\": 6, \"x\": 0, \"type\": \"explorer\", \"properties\": {\"metrics\": [{\"metricName\": \"ConcurrentExecutions\", \"resourceType\": \"AWS::Lambda::Function\", \"stat\": \"Sum\"}, {\"metricName\": \"Errors\", \"resourceType\": \"AWS::Lambda::Function\", \"stat\": \"Sum\"}], \"aggregateBy\": {\"key\": \"*\", \"func\": \"SUM\"}, \"labels\": [{\"key\": \"aws:cloudformation:logical-id\", \"value\": \"CoreAppHandler\"}], \"widgetOptions\": {\"legend\": {\"position\": \"hidden\"}, \"view\": \"timeSeries\", \"stacked\": false, \"rowsPerPage\": 1, \"widgetsPerRow\": 2}, \"period\": 60, \"splitBy\": \"\", \"region\": \"${AWS_REGION}\", \"title\": \"Core App Lambda Function\"}}]}",
      {
       "APP_DB_CLUSTER_IDENTIFIER": {
        "Fn::GetAtt": [
         "CfnExportRetrieverResource",
         "AppDbClusterIdentifier"
        ]
       },
       "APP_DB_PROXY_NAME": {
        "Fn::GetAtt": [
         "CfnExportRetrieverResource",
         "AppDbProxyName"
        ]
       },
       "AWS_REGION": {
        "Ref": "AWS::Region"
       },
       "CORE_APP_STACK_ARN": {
        "Fn::Join": [
         "",
         [
          "StackSet-",
          {
           "Fn::GetAtt": [
            "CoreAppStackSet",
            "StackSetId"
           ]
          }
         ]
        ]
       }
      }
     ]
    },
    "DashboardName": {
     "Ref": "AWS::StackName"
    }
   },
   "Type": "AWS::CloudWatch::Dashboard"
  },
  "CoreAppStackSet": {
   "Condition": "",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "DatabasesStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Core-App",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Core-App"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: November 30, 2023\n  Version: v1.6\nOutputs:\n  CoreAppHandlerName:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - CoreAppHandlerName\n    Value: !Ref 'CoreAppHandler'\n  CoreAppUrl:\n    Condition: ''\n    Value: !Join\n      - ''\n      - - !GetAtt 'Api.RestApiId'\n        - .execute-api.\n        - !Ref 'AWS::Region'\n        - .amazonaws.com/v1\n  PendingWritesDBDeadLetterQueueArn:\n    Condition: ''\n    Value: !GetAtt 'PendingDBInsertsDl.Arn'\n  PendingWritesDBDeadLetterQueueUrl:\n    Condition: ''\n    Value: !Ref 'PendingDBInsertsDl'\n  PendingWritesDBQueueArn:\n    Condition: ''\n    Value: !GetAtt 'PendingDBInserts.Arn'\n  PendingWritesDBQueueUrl:\n    Condition: ''\n    Value: !Ref 'PendingDBInserts'\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  Api:\n    Properties:\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - ' - Core Application'\n    Type: AWS::ApiGateway::RestApi\n  CoreAppHandler:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\n\\\n          import datetime\\nimport psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\\n          \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    for incoming_record in event['Records']:\\n        \\n        guid = incoming_record['body']\\n        \\n        try:\\n\\\n          \\            \\n            app_db_credentials = custom_functions.get_db_credentials('App')\\n            \\n            db_conn = psycopg2.connect(\\n                host = os.environ['APP_DB_PROXY_WRITER_ENDPOINT'],\\n\\\n          \\                port = app_db_credentials['port'],\\n                user = app_db_credentials['username'],\\n                password = app_db_credentials['password'],\\n                database\\\n          \\ = app_db_credentials['database'],\\n                connect_timeout = 3,\\n                sslmode = 'require',\\n            )\\n            \\n            id = 0\\n            curs = db_conn.cursor()\\n\\\n          \\            \\n            curs.execute('''\\n                INSERT INTO dataserver (guid, insertedon) VALUES (%s, %s) \\n                RETURNING id\\n            ''', (\\n                guid,\\n\\\n          \\                datetime.datetime.now(tz = dateutil.tz.gettz('US/Eastern')).strftime(\\\"%m/%d/%Y %H:%M:%S\\\")\\n            ))\\n    \\n            id = curs.fetchone()[0]\\n            db_conn.commit()\\n\\\n          \\            curs.close()\\n            db_conn.close()\\n        \\n        except Exception as e:\\n            print(e)\\n            raise Exception('Failed to Write Record to the Database')\\n\\\n          \\    \\n    return True\"\n      Description: Serves as the root handler behind the Web ALB\n      Environment:\n        Variables:\n          APP_DB_PROXY_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - AppDbProxyWriterEndpoint}}\n          APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'CoreAppHandlerRole.Arn'\n      Runtime: python3.9\n      Timeout: 5\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  CoreAppHandlerGetAndDeleteFromSQSQueuePolicy:\n    DependsOn:\n      - CoreAppHandlerRole\n      - PendingDBInserts\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - sqs:DeleteMessage\n              - sqs:ReceiveMessage\n              - sqs:GetQueueAttributes\n            Effect: Allow\n            Resource:\n              - !GetAtt 'PendingDBInserts.Arn'\n      PolicyName: get-and-delete-from-sqs-queue\n      Roles:\n        - !Ref 'CoreAppHandlerRole'\n    Type: AWS::IAM::Policy\n  CoreAppHandlerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - CoreAppHandler\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'CoreAppHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  CoreAppHandlerNameParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Core App Handler Function Name for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - CoreAppHandlerName\n      Tier: Standard\n      Type: String\n      Value: !Ref 'CoreAppHandler'\n    Type: AWS::SSM::Parameter\n  CoreAppHandlerPendingDBInsertsEventSource:\n    DependsOn:\n      - CoreAppHandlerPendingDBInsertsPermission\n      - CoreAppHandlerGetAndDeleteFromSQSQueuePolicy\n      - PendingDBInserts\n    Properties:\n      BatchSize: 1\n      Enabled: true\n      EventSourceArn: !GetAtt 'PendingDBInserts.Arn'\n      FunctionName: !Ref 'CoreAppHandler'\n    Type: AWS::Lambda::EventSourceMapping\n  CoreAppHandlerPendingDBInsertsPermission:\n    DependsOn:\n      - PendingDBInserts\n      - CoreAppHandler\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'CoreAppHandler'\n      Principal: sqs.amazonaws.com\n      SourceArn: !GetAtt 'PendingDBInserts.Arn'\n    Type: AWS::Lambda::Permission\n  CoreAppHandlerRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  CoreAppUrlParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Core App API Host for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - CoreAppUrl\n      Tier: Standard\n      Type: String\n      Value: !Join\n        - ''\n        - - !GetAtt 'Api.RestApiId'\n          - .execute-api.\n          - !Ref 'AWS::Region'\n          - .amazonaws.com/v1\n    Type: AWS::SSM::Parameter\n  DEFAULT4XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_4XX\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::GatewayResponse\n  DEFAULT5XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_5XX\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::GatewayResponse\n  Deployment:\n    DependsOn:\n      - RootGetMethod\n      - RootOptionsMethod\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W68\n            reason: This API does not use API keys.\n    Properties:\n      Description: Initial Deployment\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::Deployment\n  DeploymentStage:\n    DependsOn:\n      - Deployment\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W69\n            reason: This API does not use API keys.\n          - id: W64\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      DeploymentId: !Ref 'Deployment'\n      MethodSettings:\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: GET\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n      RestApiId: !Ref 'Api'\n      StageName: v1\n    Type: AWS::ApiGateway::Stage\n  PendingDBInserts:\n    DependsOn:\n      - PendingDBInsertsDl\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W48\n            reason: This resource is being used to support an ephemeral demo environment and will not contain sensitive data.\n    Properties:\n      ContentBasedDeduplication: true\n      FifoQueue: true\n      MessageRetentionPeriod: 1209600\n      RedrivePolicy:\n        deadLetterTargetArn: !GetAtt 'PendingDBInsertsDl.Arn'\n        maxReceiveCount: 25\n      VisibilityTimeout: 5\n    Type: AWS::SQS::Queue\n  PendingDBInsertsDl:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W48\n            reason: This resource is being used to support an ephemeral demo environment and will not contain sensitive data.\n    Properties:\n      ContentBasedDeduplication: true\n      FifoQueue: true\n      MessageRetentionPeriod: 1209600\n    Type: AWS::SQS::Queue\n  PendingWritesDBDeadLetterQueueArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Pending Writes DB Dead Letter Queue ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PendingWritesDBDeadLetterQueueArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PendingDBInsertsDl.Arn'\n    Type: AWS::SSM::Parameter\n  PendingWritesDBDeadLetterQueueUrlParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Pending Writes DB Dead Letter Queue URL for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PendingWritesDBDeadLetterQueueUrl\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PendingDBInsertsDl'\n    Type: AWS::SSM::Parameter\n  PendingWritesDBQueueArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Pending Writes DB Queue ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PendingWritesDBQueueArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PendingDBInserts.Arn'\n    Type: AWS::SSM::Parameter\n  PendingWritesDBQueueUrlParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Pending Writes DB Queue URL for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PendingWritesDBQueueUrl\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PendingDBInserts'\n    Type: AWS::SSM::Parameter\n  RootGetMethod:\n    DependsOn:\n      - Api\n      - PendingDBInserts\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        Credentials: !GetAtt 'SQSAPIRole.Arn'\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestParameters:\n          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''\n        RequestTemplates:\n          application/json: Action=SendMessage&MessageBody=$input.params()[\"querystring\"][\"guid\"]&MessageGroupId=$input.params()[\"querystring\"][\"guid\"]\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :sqs:path/\n            - !Ref 'AWS::AccountId'\n            - /\n            - !GetAtt 'PendingDBInserts.QueueName'\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !GetAtt 'Api.RootResourceId'\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::Method\n  RootMethodInvocationPermission:\n    DependsOn:\n      - CoreAppHandler\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'CoreAppHandler.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Ref 'Api'\n          - /*/\n          - GET\n          - /\n    Type: AWS::Lambda::Permission\n  RootOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !GetAtt 'Api.RootResourceId'\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::Method\n  SQSAPIRole:\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - apigateway.amazonaws.com\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - sqs:SendMessage\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - sqs\n                      - !Ref 'AWS::Region'\n                      - !Ref 'AWS::AccountId'\n                      - '*'\n          PolicyName: master-policy\n    Type: AWS::IAM::Role\n  WafAssociation:\n    DependsOn:\n      - DeploymentStage\n    Properties:\n      ResourceArn: !Join\n        - ''\n        - - 'arn:'\n          - !Ref 'AWS::Partition'\n          - ':apigateway:'\n          - !Ref 'AWS::Region'\n          - ::/restapis/\n          - !Ref 'Api'\n          - /stages/v1\n      WebACLArn: !Ref 'RegionalWafAclArn'\n    Type: AWS::WAFv2::WebACLAssociation\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DatabasesStackSet": {
   "Condition": "",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "NetworkingStackSet",
    "LambdaLayerCreatorResource"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Databases",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Databases"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template deploys the app and demo databases (if applicable)\n  LastUpdated: November 30, 2023\n  Version: v1.6\nOutputs:\n  AppDbAdminSecretArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - AppDbAdminSecretArn\n    Value: !Ref 'AppDbAdminSecret'\n  AppDbClusterArn:\n    Condition: ''\n    Value: !GetAtt 'AppCluster.DBClusterArn'\n  AppDbClusterIdentifier:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - AppDbClusterIdentifier\n    Value: !Ref 'AppCluster'\n  AppDbClusterReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppCluster.ReadEndpoint.Address'\n  AppDbClusterWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppCluster.Endpoint.Address'\n  AppDbInstance1Endpoint:\n    Condition: ''\n    Value: !GetAtt 'AppInstance1.Endpoint.Address'\n  AppDbInstance2Endpoint:\n    Condition: ''\n    Value: !GetAtt 'AppInstance2.Endpoint.Address'\n  AppDbProxyArn:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxy.DBProxyArn'\n  AppDbProxyName:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - AppDbProxyName\n    Value: !Ref 'AppDbProxy'\n  AppDbProxyPort:\n    Condition: ''\n    Value: !GetAtt 'AppCluster.Endpoint.Port'\n  AppDbProxyReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'\n  AppDbProxyWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxy.Endpoint'\n  DemoDbAdminSecretArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - DemoDbAdminSecretArn\n    Value: !Ref 'DemoDbAdminSecret'\n  DemoDbClusterArn:\n    Condition: ''\n    Value: !GetAtt 'DemoCluster.DBClusterArn'\n  DemoDbClusterIdentifier:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - DemoDbClusterIdentifier\n    Value: !Ref 'DemoCluster'\n  DemoDbClusterReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'DemoCluster.ReadEndpoint.Address'\n  DemoDbClusterWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'DemoCluster.Endpoint.Address'\n  KmsKeyArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - KmsKeyArn\n    Value: !GetAtt 'KMSKey.Arn'\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  AppCluster:\n    DeletionPolicy: Delete\n    DependsOn:\n      - DbSubnetGroup\n    Properties:\n      BackupRetentionPeriod: 30\n      DBSubnetGroupName: !Ref 'DbSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '14.7'\n      KmsKeyId: !Ref 'KMSKey'\n      MasterUserPassword: !Ref 'DatabaseAdminPassword'\n      MasterUsername: !Ref 'DatabaseAdminUsername'\n      Port: 5432\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'DbClusterSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  AppDatabasePreparerResource:\n    DependsOn:\n      - DatabasePreparerLogGroup\n      - AppInstance1\n      - AppInstance2\n      - AppDbAdminSecret\n    Properties:\n      Properties:\n        DatabaseHost: !GetAtt 'AppDbProxy.Endpoint'\n        DatabaseIdentifier: App\n        QueriesToExecute:\n          - \"\\n                CREATE SEQUENCE IF NOT EXISTS data_sequence start 1 increment 1;\\n                \"\n          - \"\\n                CREATE TABLE IF NOT EXISTS dataserver (\\n                    id integer not null primary key default nextval('data_sequence'),\\n                    guid VARCHAR(255) NOT NULL,\\n\\\n            \\                    insertedon timestamp NOT NULL DEFAULT NOW(),\\n                    migratedon timestamp NOT NULL DEFAULT NOW()\\n                );\\n                \"\n      ServiceToken: !GetAtt 'DatabasePreparer.Arn'\n      Type: Custom::ExecuteQueriesAgainstDatabase\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  AppDbAdminSecret:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Admin Account for '\n          - !Ref 'MainStackName'\n      KmsKeyId: !Ref 'KMSKey'\n      SecretString: !Join\n        - ''\n        - - '{\"username\": \"'\n          - !Ref 'DatabaseAdminUsername'\n          - '\", \"password\": \"'\n          - !Ref 'DatabaseAdminPassword'\n          - '\", \"database\": \"template1\"}'\n    Type: AWS::SecretsManager::Secret\n  AppDbAdminSecretArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Admin Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbAdminSecretArn\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppDbAdminSecret'\n    Type: AWS::SSM::Parameter\n  AppDbAdminSecretAttachment:\n    DependsOn:\n      - AppDbAdminSecret\n      - AppCluster\n    Properties:\n      SecretId: !Ref 'AppDbAdminSecret'\n      TargetId: !Ref 'AppCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  AppDbClusterArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional App DB Cluster ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbClusterArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppCluster.DBClusterArn'\n    Type: AWS::SSM::Parameter\n  AppDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional App DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppCluster'\n    Type: AWS::SSM::Parameter\n  AppDbClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Reader Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppCluster.ReadEndpoint.Address'\n    Type: AWS::SSM::Parameter\n  AppDbClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Writer Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppCluster.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  AppDbInstance1EndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Instance 1 Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbInstance1Endpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppInstance1.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  AppDbInstance2EndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Instance 2 Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbInstance2Endpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppInstance2.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  AppDbProxy:\n    Properties:\n      Auth:\n        - SecretArn: !Ref 'AppDbAdminSecret'\n      DBProxyName: !Ref 'AppCluster'\n      EngineFamily: POSTGRESQL\n      RequireTLS: true\n      RoleArn: !GetAtt 'DbProxyRole.Arn'\n      VpcSecurityGroupIds:\n        - !Ref 'DbProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrivateSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrivateSubnetZoneBId}}\n    Type: AWS::RDS::DBProxy\n  AppDbProxyArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbProxyArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxy.DBProxyArn'\n    Type: AWS::SSM::Parameter\n  AppDbProxyNameParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Proxy name for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbProxyName\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppDbProxy'\n    Type: AWS::SSM::Parameter\n  AppDbProxyPortParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy port for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbProxyPort\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppCluster.Endpoint.Port'\n    Type: AWS::SSM::Parameter\n  AppDbProxyReaderEndpoint:\n    DependsOn:\n      - AppDbProxy\n    Properties:\n      DBProxyEndpointName: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - app\n          - reader\n      DBProxyName: !Ref 'AppDbProxy'\n      TargetRole: READ_ONLY\n      VpcSecurityGroupIds:\n        - !Ref 'DbProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrivateSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PrivateSubnetZoneBId}}\n    Type: AWS::RDS::DBProxyEndpoint\n  AppDbProxyReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy reader endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbProxyReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'\n    Type: AWS::SSM::Parameter\n  AppDbProxyTargetGroup:\n    DependsOn:\n      - AppDbProxy\n      - AppInstance1\n    Properties:\n      DBClusterIdentifiers:\n        - !Ref 'AppCluster'\n      DBProxyName: !Ref 'AppDbProxy'\n      TargetGroupName: default\n    Type: AWS::RDS::DBProxyTargetGroup\n  AppDbProxyWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy writer endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - AppDbProxyWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxy.Endpoint'\n    Type: AWS::SSM::Parameter\n  AppInstance1:\n    DependsOn:\n      - DbSubnetGroup\n      - AppCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      CACertificateIdentifier: rds-ca-rsa4096-g1\n      DBClusterIdentifier: !Ref 'AppCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  AppInstance2:\n    DependsOn:\n      - DbSubnetGroup\n      - AppCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      CACertificateIdentifier: rds-ca-rsa4096-g1\n      DBClusterIdentifier: !Ref 'AppCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  ClusterParameterGroup:\n    Properties:\n      Description: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - ' - Cluster Param Group'\n      Family: aurora-postgresql13\n      Parameters:\n        rds.logical_replication: 1\n        wal_sender_timeout: 240000\n    Type: AWS::RDS::DBClusterParameterGroup\n  DatabasePreparer:\n    DependsOn:\n      - DatabasePreparerRole\n      - AppDbAdminSecret\n      - DemoDbAdminSecret\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport subprocess\\nsubprocess.call('pip\\\n          \\ install urllib3<2 -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL) # nosec Not subject to user input\\nsys.path.insert(1, '/tmp/') # nosec Required\\\n          \\ for package inclusion\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport cfnresponse\\nimport multi_region_db\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\\n          \\ncustom_functions = multi_region_db.Functions()\\n\\n'''\\n    RDSAdminSecretArn\\n'''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    if 'Properties' in event['ResourceProperties']:\\n\\\n          \\        arguments = event['ResourceProperties']['Properties']\\n        \\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\\n    \\n    response_data = {}\\n    \\n    if\\\n          \\ event['RequestType'] in ['Create', 'Update']:\\n        \\n        db_credentials = custom_functions.get_db_credentials(arguments['DatabaseIdentifier'])\\n        \\n        try:\\n             \\\n          \\   \\n            db_conn = psycopg2.connect(\\n                host = db_credentials['host'],\\n                port = db_credentials['port'],\\n                user = db_credentials['username'],\\n\\\n          \\                password = db_credentials['password'],\\n                database = db_credentials['database'],\\n                connect_timeout = 3,\\n                sslmode = 'require',\\n  \\\n          \\          )\\n            \\n            curs = db_conn.cursor()\\n            \\n            for query in arguments['QueriesToExecute']:\\n                \\n                # nosemgrep - Not subject\\\n          \\ to user input\\n                curs.execute(query.replace('\\\\r','').replace('\\\\n',' '))\\n                db_conn.commit()\\n            \\n            curs.close()\\n            db_conn.close()\\n\\\n          \\        \\n        except Exception as error:\\n\\n            print('There was a problem executing the DDL statements: ' + str(error))\\n            return cfnresponse.send(event, context, cfnresponse.FAILED,\\\n          \\ response_data)\\n            \\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\"\n      Description: Executes DDL statements against new DB clusters to create necessary schema\n      Environment:\n        Variables:\n          APP_DB_SECRET_ARN: !Ref 'AppDbAdminSecret'\n          DEMO_DB_SECRET_ARN: !Ref 'DemoDbAdminSecret'\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'DatabasePreparerRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  DatabasePreparerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - DatabasePreparer\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DatabasePreparer'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DatabasePreparerRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'AppDbAdminSecret'\n                  - !Ref 'DemoDbAdminSecret'\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !GetAtt 'KMSKey.Arn'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  DbClusterSecurityGroup:\n    DependsOn:\n      - DbProxySecurityGroup\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W5\n            reason: Access to dynamic public IPs is required.\n    Properties:\n      GroupDescription: RDS Security Group\n      SecurityGroupEgress:\n        - CidrIp: '0.0.0.0/0'\n          Description: HTTPS to RDS Service\n          FromPort: 443\n          IpProtocol: tcp\n          ToPort: 443\n      SecurityGroupIngress:\n        - Description: DB Access from In-Region Lambda Functions\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n          ToPort: 5432\n        - Description: DB Access from In-Region RDS Proxy\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Ref 'DbProxySecurityGroup'\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /VpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DbProxyRole:\n    DependsOn:\n      - KMSKey\n      - AppDbAdminSecret\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - rds.amazonaws.com\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !GetAtt 'KMSKey.Arn'\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'AppDbAdminSecret'\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  DbProxySecurityGroup:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W5\n            reason: Access to dynamic public IPs is required.\n    Properties:\n      GroupDescription: RDS Proxy Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from Lambda\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /VpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DbProxySecurityGroupEgressToDB:\n    DependsOn:\n      - DbProxySecurityGroup\n      - DbClusterSecurityGroup\n    Properties:\n      Description: TCP Traffic to Source DB\n      DestinationSecurityGroupId: !Ref 'DbClusterSecurityGroup'\n      FromPort: 5432\n      GroupId: !Ref 'DbProxySecurityGroup'\n      IpProtocol: tcp\n      ToPort: 5432\n    Type: AWS::EC2::SecurityGroupEgress\n  DbSubnetGroup:\n    Properties:\n      DBSubnetGroupDescription: Private Database Subnets\n      DBSubnetGroupName: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - !Join\n            - ''\n            - !Split\n              - subnet-\n              - !Join\n                - '-'\n                - - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Private\n                      - SubnetZoneAId}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Private\n                      - SubnetZoneAId}}\n      SubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Private\n            - SubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Private\n            - SubnetZoneBId}}\n    Type: AWS::RDS::DBSubnetGroup\n  DemoCluster:\n    DeletionPolicy: Delete\n    DependsOn:\n      - DbSubnetGroup\n    Properties:\n      BackupRetentionPeriod: 30\n      DBSubnetGroupName: !Ref 'DbSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '14.7'\n      KmsKeyId: !Ref 'KMSKey'\n      MasterUserPassword: !Ref 'DatabaseAdminPassword'\n      MasterUsername: !Ref 'DatabaseAdminUsername'\n      Port: 5432\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'DbClusterSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  DemoDatabasePreparerResource:\n    DependsOn:\n      - DatabasePreparerLogGroup\n      - DemoInstance1\n      - DemoInstance2\n      - DemoDbAdminSecret\n    Properties:\n      Properties:\n        DatabaseHost: ''\n        DatabaseIdentifier: Demo\n        QueriesToExecute:\n          - \"\\n                CREATE TABLE IF NOT EXISTS dataclient (\\n                    guid character varying(255) COLLATE pg_catalog.\\\"default\\\" NOT NULL,\\n                    primary_region integer\\\n            \\ NOT NULL,\\n                    failover_region integer NOT NULL,\\n                    http_code integer,\\n                    insertedon time without time zone\\n                );\\n      \\\n            \\          \"\n          - \"\\n                CREATE TABLE IF NOT EXISTS failoverevents (\\n                    event integer NOT NULL,\\n                    insertedon timestamp without time zone NOT NULL\\n           \\\n            \\     );\\n                \"\n      ServiceToken: !GetAtt 'DatabasePreparer.Arn'\n      Type: Custom::ExecuteQueriesAgainstDatabase\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  DemoDbAdminSecret:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Admin Account for '\n          - !Ref 'MainStackName'\n      KmsKeyId: !Ref 'KMSKey'\n      SecretString: !Join\n        - ''\n        - - '{\"username\": \"'\n          - !Ref 'DatabaseAdminUsername'\n          - '\", \"password\": \"'\n          - !Ref 'DatabaseAdminPassword'\n          - '\", \"database\": \"template1\"}'\n    Type: AWS::SecretsManager::Secret\n  DemoDbAdminSecretArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Admin Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DemoDbAdminSecretArn\n      Tier: Standard\n      Type: String\n      Value: !Ref 'DemoDbAdminSecret'\n    Type: AWS::SSM::Parameter\n  DemoDbAdminSecretAttachment:\n    DependsOn:\n      - DemoDbAdminSecret\n      - DemoCluster\n    Properties:\n      SecretId: !Ref 'DemoDbAdminSecret'\n      TargetId: !Ref 'DemoCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  DemoDbClusterArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional Demo DB Cluster ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DemoDbClusterArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'DemoCluster.DBClusterArn'\n    Type: AWS::SSM::Parameter\n  DemoDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional Demo DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DemoDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'DemoCluster'\n    Type: AWS::SSM::Parameter\n  DemoDbClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Reader Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DemoDbClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'DemoCluster.ReadEndpoint.Address'\n    Type: AWS::SSM::Parameter\n  DemoDbClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Writer Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DemoDbClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'DemoCluster.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  DemoInstance1:\n    DependsOn:\n      - DbSubnetGroup\n      - DemoCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      CACertificateIdentifier: rds-ca-rsa4096-g1\n      DBClusterIdentifier: !Ref 'DemoCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  DemoInstance2:\n    DependsOn:\n      - DbSubnetGroup\n      - DemoCluster\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      CACertificateIdentifier: rds-ca-rsa4096-g1\n      DBClusterIdentifier: !Ref 'DemoCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n      PubliclyAccessible: false\n    Type: AWS::RDS::DBInstance\n  KMSKey:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Muli-Region KMS Key for '\n          - !Ref 'AWS::StackName'\n      EnableKeyRotation: true\n      Enabled: true\n      KeyPolicy:\n        Id: default-key-policy\n        Statement:\n          - Action: kms:*\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:aws:iam::'\n                  - !Ref 'AWS::AccountId'\n                  - :root\n            Resource: '*'\n            Sid: Enable IAM User Permissions\n        Version: '2012-10-17'\n      MultiRegion: true\n    Type: AWS::KMS::Key\n  KmsKeyArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional KMS Key ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - KmsKeyArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'KMSKey.Arn'\n    Type: AWS::SSM::Parameter\nTransform:\n  Name: AWS::SecretsManager-2020-07-23\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DemoAPIDeploymentStackSet": {
   "Condition": "DeployDemoModules",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "RegionalWafAcl",
    "CoreAppStackSet",
    "NetworkingStackSet",
    "DemoAPIGatewayStackSet",
    "DemoAPIMethods1StackSet",
    "DemoAPIMethods2StackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Demo-API-Deployment",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Demo-API-Deployment"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template deploys the demo API Gateway API\n  LastUpdated: November 30, 2023\n  Version: v1.6\nOutputs:\n  ApiHostExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -DemoApiHost\n    Value: !Join\n      - ''\n      - - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DemoAppApiId}}\n        - .execute-api.\n        - !Ref 'AWS::Region'\n        - .amazonaws.com/\n        - v1\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  Deployment:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W68\n            reason: This API does not use API keys.\n    Properties:\n      Description: Initial Deployment\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Deployment\n  DeploymentStage:\n    DependsOn:\n      - Deployment\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W69\n            reason: This API does not use API keys.\n          - id: W64\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      DeploymentId: !Ref 'Deployment'\n      MethodSettings:\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: GET\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: POST\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n      StageName: v1\n    Type: AWS::ApiGateway::Stage\n  WafAssociation:\n    DependsOn:\n      - DeploymentStage\n    Properties:\n      ResourceArn: !Join\n        - ''\n        - - 'arn:'\n          - !Ref 'AWS::Partition'\n          - ':apigateway:'\n          - !Ref 'AWS::Region'\n          - ::/restapis/\n          - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n          - /stages/\n          - v1\n      WebACLArn: !Ref 'RegionalWafAclArn'\n    Type: AWS::WAFv2::WebACLAssociation\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DemoAPIGatewayStackSet": {
   "Condition": "DeployDemoModules",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Demo-API-Gateway",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Demo-API-Gateway"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template provisions the demo API Gateway\n  LastUpdated: November 30, 2023\n  Version: v1.6\nOutputs:\n  ApiRootResourceId:\n    Condition: ''\n    Value: !GetAtt 'Api.RootResourceId'\n  DemoAppApiId:\n    Condition: ''\n    Value: !Ref 'Api'\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  Api:\n    Properties:\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - ' - Demo Application'\n    Type: AWS::ApiGateway::RestApi\n  ApiRootResourceIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway Root Resource ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - ApiRootResourceId\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'Api.RootResourceId'\n    Type: AWS::SSM::Parameter\n  DEFAULT4XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_4XX\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::GatewayResponse\n  DEFAULT5XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_5XX\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::GatewayResponse\n  DemoAppApiIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DemoAppApiId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'Api'\n    Type: AWS::SSM::Parameter\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DemoAPIMethods1StackSet": {
   "Condition": "DeployDemoModules",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CoreAppStackSet",
    "NetworkingStackSet",
    "DemoAPIGatewayStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Demo-API-Methods-1",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Demo-API-Methods-1"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template provisions the demo API methods and handlers\n  LastUpdated: November 30, 2023\n  Version: v1.6\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  CalculateRecoveryTime:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\n\\\n          import multi_region_db\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\n    db_conn = psycopg2.connect(\\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n        \\n    curs\\\n          \\ = db_conn.cursor()\\n    \\n    curs.execute('''\\n        SELECT\\n            DATE_PART('second', max(insertedon)::time - min(insertedon)::time) AS rto\\n        FROM dataclient \\n        WHERE\\\n          \\ http_code = 500 \\n        GROUP BY http_code\\n    ''');\\n    \\n    client_events = curs.fetchall()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\n    records_to_return = []\\n    \\n    for\\\n          \\ client_event in client_events:\\n    \\n        c = 0\\n        temp2 = {}\\n        \\n        for col in curs.description:\\n            \\n            temp2.update({str(col[0]): client_event[c]})\\n\\\n          \\            c += 1\\n        \\n        records_to_return.append(temp2)\\n    \\n    return {\\n        'code': 200,\\n        'body': json.dumps(records_to_return, default = str),\\n    }\"\n      Description: Retrieves the resolved RTO\n      Environment:\n        Variables:\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'CalculateRecoveryTimeRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  CalculateRecoveryTimeLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - CalculateRecoveryTime\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'CalculateRecoveryTime'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  CalculateRecoveryTimeMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'CalculateRecoveryTime.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getRecoveryTime\n      ResourceId: !Ref 'CalculateRecoveryTimeResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  CalculateRecoveryTimeMethodInvocationPermission:\n    DependsOn:\n      - CalculateRecoveryTime\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'CalculateRecoveryTime.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - calculate-recovery-time\n    Type: AWS::Lambda::Permission\n  CalculateRecoveryTimeResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: calculate-recovery-time\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  CalculateRecoveryTimeResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'CalculateRecoveryTimeResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  CalculateRecoveryTimeRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  GetClientTraffic:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\t\\\n          \\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\t\\nfrom datetime import timedelta\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n\\\n          \\    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n\\\n          \\        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        sslmode = 'require',\\n        password = demo_db_credentials['password'],\\n        database\\\n          \\ = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n    \\n    curs = db_conn.cursor()\\t\\n    \\n    curs.execute('''\\n        SELECT\\n            insertedon,\\n          \\\n          \\  sum(CASE WHEN http_code = 200 THEN 1 ELSE 0 END)\\n        FROM dataclient\\n        WHERE http_code != 0\\n        GROUP BY insertedon\\n        ORDER BY insertedon DESC \\n        LIMIT 15\\n \\\n          \\   ''')\\n    \\n    traffic_records = curs.fetchall()\\n    \\n    curs.close()\\t\\n    db_conn.close()\\n    \\n    data_arr = []\\t\\n    label_arr = []\\n    \\n    '''\\n        For each traffic record\\\n          \\ found\\n    '''\\n    for record in reversed(traffic_records):\\n        \\n        data_arr.append(str(record[1]))\\n        label_arr.append(str(record[0]))\\n    \\n    if len(label_arr) > 0:\\n\\\n          \\        \\n        for n in range(len(label_arr) + 1, 16):\\t\\n            \\n            data_arr.insert(0, '0')\\n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\\n\\\n          \\    \\n    #custom_functions.add_time(label_arr, data_arr)\\n        \\n    return {\\n        'code': 200,\\n        'body': json.dumps([{\\n            'data': ','.join(data_arr),\\n            'labels':\\\n          \\ ','.join(label_arr),\\n        }])\\n    }\"\n      Description: Retrieves client traffic logs from the database\n      Environment:\n        Variables:\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'GetClientTrafficRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetClientTrafficLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetClientTraffic\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetClientTraffic'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetClientTrafficMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetClientTraffic.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getClientTraffic\n      ResourceId: !Ref 'GetClientTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClientTrafficMethodInvocationPermission:\n    DependsOn:\n      - GetClientTraffic\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetClientTraffic.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - get-client-traffic\n    Type: AWS::Lambda::Permission\n  GetClientTrafficResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-client-traffic\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetClientTrafficResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetClientTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClientTrafficRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  GetFailoverEvents:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\n\\\n          import multi_region_db\\n\\ncustom_functions = multi_region_db.Functions()\\n        \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n        \\n    curs\\\n          \\ = db_conn.cursor()\\n    \\n    curs.execute('''\\n        SELECT \\n            event,\\n            to_char(insertedon,'HH24:MI:SS') AS time, \\n            insertedon \\n        FROM failoverevents\\n\\\n          \\        ORDER BY insertedon\\n    ''');\\n    \\n    failover_events = curs.fetchall()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\n    records_to_return = []\\n    \\n    for x in failover_events:\\n\\\n          \\    \\n        c = 0\\n        temp2 = {}\\n        \\n        for col in curs.description:\\n            \\n            temp2.update({str(col[0]): x[c]})\\n            c += 1\\n        \\n        records_to_return.append(temp2)\\n\\\n          \\    \\n    return {\\n        'code': 200,\\n        'body': json.dumps(records_to_return, default = str)\\n    }\"\n      Description: Retrieves failover events from the database\n      Environment:\n        Variables:\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'GetFailoverEventsRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetFailoverEventsLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetFailoverEvents\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetFailoverEvents'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetFailoverEventsMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetFailoverEvents.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getFailoverEvents\n      ResourceId: !Ref 'GetFailoverEventsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GetFailoverEventsMethodInvocationPermission:\n    DependsOn:\n      - GetFailoverEvents\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetFailoverEvents.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - get-failover-events\n    Type: AWS::Lambda::Permission\n  GetFailoverEventsResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-failover-events\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetFailoverEventsResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetFailoverEventsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GetFailoverEventsRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  InitiateFailover:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\n\\\n          import psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\\n          \\ndef trigger_failover():\\n    \\n    try:\\n        \\n        boto3.client('rds').failover_db_cluster(\\n            DBClusterIdentifier = os.environ['APP_DB_CLUSTER_IDENTIFIER']\\n        )\\n  \\\n          \\      \\n    except boto3_client_error as e:\\n        raise Exception('Failed to Initiate Cluster Failover: ' + str(e))\\n        \\ndef log_failover_event():\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        sslmode = 'require',\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n\\n    curs = db_conn.cursor()\\n\\\n          \\    \\n    curs.execute('''\\n        INSERT INTO failoverevents (event, insertedon) \\n            VALUES (1, %s)\\n    ''', (\\n        datetime.datetime.now().strftime(\\\"%m/%d/%Y %H:%M:%S\\\"), \\n\\\n          \\    ))\\n    \\n    db_conn.commit()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    trigger_failover()\\n\\n    log_failover_event()\\n\\\n          \\    \\n    return {\\n        'code': 200,\\n        'body': []\\n    }\"\n      Description: Logs failover events\n      Environment:\n        Variables:\n          APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterIdentifier}}\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'InitiateFailoverRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  InitiateFailoverLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - InitiateFailover\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'InitiateFailover'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  InitiateFailoverMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'InitiateFailover.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getInitiateFailover\n      ResourceId: !Ref 'InitiateFailoverResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  InitiateFailoverMethodInvocationPermission:\n    DependsOn:\n      - InitiateFailover\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'InitiateFailover.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - initiate-failover\n    Type: AWS::Lambda::Permission\n  InitiateFailoverResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: initiate-failover\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  InitiateFailoverResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'InitiateFailoverResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  InitiateFailoverRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:FailoverDBCluster\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbClusterArn}}\n                Sid: InitiateClusterFailover\n          PolicyName: initiate-cluster-failover\n    Type: AWS::IAM::Role\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DemoAPIMethods2StackSet": {
   "Condition": "DeployDemoModules",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CoreAppStackSet",
    "NetworkingStackSet",
    "DemoAPIGatewayStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Demo-API-Methods-2",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Demo-API-Methods-2"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template provisions the demo API methods and handlers\n  LastUpdated: November 30, 2023\n  Version: v1.6\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  ClientEmulator:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport uuid\\n\\\n          import psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport urllib.request\\nimport multi_region_db\\nfrom botocore.vendored import requests\\n\\ncustom_functions = multi_region_db.Functions()\\n\\\n          \\        \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    guid = uuid.uuid4()\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n\\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\n    db_conn = psycopg2.connect(\\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n\\n    curs = db_conn.cursor()\\n\\\n          \\    \\n    curs.execute('''\\n        INSERT INTO dataclient (guid, primary_region, failover_region, http_code, insertedon) \\n            VALUES (%s, 0, 0, 0, %s)\\n    ''', (\\n        str(guid),\\n\\\n          \\        datetime.datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\")\\n    ))\\n    \\n    db_conn.commit()\\n    \\n    http_code = 200\\n    http_content = ''\\n\\n    print('END guid: ' + str(guid))\\n\\\n          \\n    try:\\n        \\n        # nosemgrep - No subject to user input (Semgrep)\\n        res = urllib.request.urlopen(\\n            urllib.request.Request(\\n                url = 'https://' + os.environ['PUBLIC_APP_URL']\\\n          \\ + '?guid=' + str(guid), # nosec - Not subject to user input (Bandit)\\n                method = 'GET',\\n            ),\\n            timeout = 5\\n        )\\n        \\n        http_code = res.status\\n\\\n          \\        http_content = res.read().decode()\\n        \\n    except Exception as e:\\n        http_code = 500\\n        print('Client Web Request Failed :' + str(e))\\n\\n    try: \\n\\n        if http_code\\\n          \\ > 200:\\n            http_content = ''\\n            \\n        print(http_code)\\n            \\n        curs = db_conn.cursor()\\n        \\n        curs.execute('''\\n            UPDATE dataclient\\\n          \\ SET\\n                http_code = %s\\n            WHERE guid = %s\\n        ''', (\\n            http_code,\\n            str(guid)\\n        ))\\n        \\n        db_conn.commit()\\n        \\n  \\\n          \\  except Exception as ex:\\n        http_code = 500\\n        print('Failed to Update Client Request: ' + str(ex) + ' - HTTP Content: \\\"' + http_content + '\\\"')\\n    \\n    curs.close()\\n    db_conn.close()\\n\\\n          \\    \\n    return True\"\n      Description: Emulates legitimate client traffic\n      Environment:\n        Variables:\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n          PUBLIC_APP_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /CoreAppUrl}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'ClientEmulatorRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  ClientEmulatorLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - ClientEmulator\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'ClientEmulator'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  ClientEmulatorRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  ClientEmulatorTopicSubscription:\n    DependsOn:\n      - ClientEmulator\n      - TestTrafficTopic\n      - TestTrafficTopicPermission\n    Properties:\n      Endpoint: !GetAtt 'ClientEmulator.Arn'\n      Protocol: lambda\n      TopicArn: !Ref 'TestTrafficTopic'\n    Type: AWS::SNS::Subscription\n  GenerateSampleTraffic:\n    DependsOn:\n      - GenerateSampleTrafficRole\n      - TestTrafficTopic\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport os\\nimport time\\nimport json\\nimport boto3\\n\\ndef handler(event, context):\\n\\\n          \\    \\n    print(json.dumps(event))\\n\\n    sns_client = boto3.client('sns')\\n    \\n    for i in range(0, 3000):\\n        \\n        sns_client.publish(\\n            Message = 'Message #: ' + str(i),\\n\\\n          \\            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\\n        )\\n        \\n        time.sleep(0.05)\\n    \\n    return {\\n        'code': 200,\\n        'body': json.dumps([])\\n    }\\n\"\n      Description: Generates test client traffic\n      Environment:\n        Variables:\n          TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'GenerateSampleTrafficRole.Arn'\n      Runtime: python3.9\n      Timeout: 900\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GenerateSampleTrafficLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GenerateSampleTraffic\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GenerateSampleTraffic'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GenerateSampleTrafficMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GenerateSampleTraffic.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getTrafficGenerator\n      ResourceId: !Ref 'GenerateSampleTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GenerateSampleTrafficMethodInvocationPermission:\n    DependsOn:\n      - GenerateSampleTraffic\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GenerateSampleTraffic.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - generate-sample-traffic\n    Type: AWS::Lambda::Permission\n  GenerateSampleTrafficResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: generate-sample-traffic\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  GenerateSampleTrafficResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GenerateSampleTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GenerateSampleTrafficRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies: []\n    Type: AWS::IAM::Role\n  GenerateSampleTrafficRoleGenerateTestTrafficPolicy:\n    DependsOn:\n      - GenerateSampleTrafficRole\n      - TestTrafficTopic\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - sns:Publish\n            Effect: Allow\n            Resource:\n              - !Ref 'TestTrafficTopic'\n            Sid: SendMessagesToSNS\n      PolicyName: generate-test-traffic\n      Roles:\n        - !Ref 'GenerateSampleTrafficRole'\n    Type: AWS::IAM::Policy\n  GetEnvironmentData:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\n\\\n          import psycopg2\\nimport multi_region_db\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\napp_db_credentials = custom_functions.get_db_credentials('App')\\n\\\n          \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    env_data = {\\n        'clusterInfo': {}\\n    }\\n    \\n    rds_client = boto3.client('rds')\\n    sqs_client = boto3.client('sqs')\\n\\\n          \\    \\n    ######################\\n    #### CLUSTER INFO ####\\n    ######################\\n\\n    cluster_resp = rds_client.describe_db_clusters(\\n        DBClusterIdentifier = os.environ['APP_DB_CLUSTER_IDENTIFIER']\\n\\\n          \\    )\\n        \\n    for member in cluster_resp['DBClusters'][0]['DBClusterMembers']:\\n        \\n        instance_resp = rds_client.describe_db_instances(\\n            DBInstanceIdentifier =\\\n          \\ member['DBInstanceIdentifier']\\n        )\\n        \\n        instance_data = {\\n            'az': instance_resp['DBInstances'][0]['AvailabilityZone'],\\n            'type': 'WRITER' if member['IsClusterWriter']\\\n          \\ is True else 'READER'\\n        }\\n        \\n        try:\\n            \\n            db_conn = psycopg2.connect(\\n                host = instance_resp['DBInstances'][0]['Endpoint']['Address'],\\n\\\n          \\                port = app_db_credentials['port'],\\n                user = app_db_credentials['username'],\\n                password = app_db_credentials['password'],\\n                database\\\n          \\ = app_db_credentials['database'],\\n                connect_timeout = 3,\\n                sslmode = 'require',\\n            )\\n            \\n            curs = db_conn.cursor()\\n            \\n\\\n          \\            curs.execute('''\\n                SELECT\\n                    COUNT(*) AS count\\n                FROM dataserver\\n            ''');\\n            \\n            instance_records = curs.fetchone()\\n\\\n          \\            \\n            instance_data['records'] = instance_records[0]\\n    \\n            curs.close()\\n            db_conn.close()\\n            \\n        except psycopg2.OperationalError as\\\n          \\ err:\\n            \\n            instance_data['records'] = 'N/A - Offline'\\n        \\n        env_data['clusterInfo'][member['DBInstanceIdentifier']] = instance_data\\n    \\n    ##############################\\n\\\n          \\    #### QUEUE MESSAGE COUNTS ####\\n    ##############################\\n    \\n    try:\\n        \\n        pending_writes_queue_resp = sqs_client.get_queue_attributes(\\n            QueueUrl =\\\n          \\ os.environ['PENDING_WRITES_QUEUE_URL'],\\n            AttributeNames = [\\n                'ApproximateNumberOfMessages',\\n                'ApproximateNumberOfMessagesNotVisible',\\n          \\\n          \\  ]\\n        )\\n        \\n        attrs = pending_writes_queue_resp['Attributes']\\n        \\n        env_data['MessagesInPendingWritesQueue'] = int(attrs['ApproximateNumberOfMessages']) + int(attrs['ApproximateNumberOfMessagesNotVisible'])\\n\\\n          \\        \\n        pending_writes_dl_queue_resp = sqs_client.get_queue_attributes(\\n            QueueUrl = os.environ['PENDING_WRITES_DL_QUEUE_URL'],\\n            AttributeNames = [\\n        \\\n          \\        'ApproximateNumberOfMessages',\\n                'ApproximateNumberOfMessagesNotVisible',\\n            ]\\n        )\\n        \\n        attrs = pending_writes_dl_queue_resp['Attributes']\\n\\\n          \\        \\n        env_data['MessagesInPendingWritesDeadLetterQueue'] = int(attrs['ApproximateNumberOfMessages']) + int(attrs['ApproximateNumberOfMessagesNotVisible'])\\n        \\n    except boto3_client_error\\\n          \\ as e:\\n        raise Exception('Failed to Retrieve Queue Attributes: ' + str(e))\\n    \\n    return {\\n        'code': 200,\\n        'body': json.dumps(env_data)\\n    }\"\n      Description: Retrieves data about DB instances, SQS queues, and other resources for use on the dashboard\n      Environment:\n        Variables:\n          APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterIdentifier}}\n          APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbAdminSecretArn}}\n          PENDING_WRITES_DL_QUEUE_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PendingWritesDBDeadLetterQueueUrl}}\n          PENDING_WRITES_QUEUE_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PendingWritesDBQueueUrl}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'GetEnvironmentDataRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetEnvironmentDataLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetEnvironmentData\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetEnvironmentData'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetEnvironmentDataMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetEnvironmentData.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getEnvironmentData\n      ResourceId: !Ref 'GetEnvironmentDataResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GetEnvironmentDataMethodInvocationPermission:\n    DependsOn:\n      - GetEnvironmentData\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetEnvironmentData.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - get-environment-data\n    Type: AWS::Lambda::Permission\n  GetEnvironmentDataResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-environment-data\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetEnvironmentDataResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetEnvironmentDataResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  GetEnvironmentDataRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DescribeDBClusters\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbClusterArn}}\n                Sid: DescribeRDSClusters\n          PolicyName: get-db-clusters\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DescribeDBInstances\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:aws:rds:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :db*\n                Sid: DescribeDBInstances\n          PolicyName: get-db-instances\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - sqs:GetQueueAttributes\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /PendingWritesDBQueueArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /PendingWritesDBDeadLetterQueueArn}}\n                Sid: DescribeDBInstances\n          PolicyName: get-queue-attributes\n    Type: AWS::IAM::Role\n  ResetDemoEnvironment:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\n\\\n          import psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\nsqs_client = boto3.client('sqs')\\n\\\n          \\ncustom_functions = multi_region_db.Functions()\\n\\ndef prune_db_tables(db_identifier, table_names):\\n    \\n    db_credentials = custom_functions.get_db_credentials(db_identifier)\\n    \\n    db_conn\\\n          \\ = psycopg2.connect(\\n        host = os.environ[db_identifier.upper() + '_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = db_credentials['port'],\\n        user = db_credentials['username'],\\n \\\n          \\       sslmode = 'require',\\n        password = db_credentials['password'],\\n        database = db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n    \\n    for table_to_prune\\\n          \\ in table_names:\\n        \\n        curs = db_conn.cursor()\\n        \\n        # nosemgrep - Not subject to user input (Semgrep)\\n        curs.execute('DELETE FROM ' + table_to_prune) # nosec\\\n          \\ - Not subject to user input (Bandit)\\n        \\n        db_conn.commit()\\n        \\n    curs.close()\\n    db_conn.close()\\n    \\n    return True\\n    \\ndef purge_sqs_queue(queue_url):\\n    \\n\\\n          \\    try:\\n        \\n        sqs_client.purge_queue(\\n            QueueUrl = queue_url,\\n        )\\n    \\n    except boto3_client_error as e:\\n        raise Exception('Failed to Purgue Queue:\\\n          \\ ' + str(e))\\n        \\n    return True\\n\\n'''\\n    It is expected that this function will be run in the PRIMARY AWS region\\n'''\\ndef handler(event, context):\\n    \\n    prune_db_tables('App',\\\n          \\ ['dataserver'])\\n    prune_db_tables('Demo', ['dataclient', 'failoverevents'])\\n    \\n    purge_sqs_queue(os.environ['PENDING_WRITES_QUEUE_URL'])\\n    purge_sqs_queue(os.environ['PENDING_WRITES_DL_QUEUE_URL'])\\n\\\n          \\    \\n    return {\\n        'code': 200,\\n        'body': json.dumps([])\\n    }\"\n      Description: Resets the demo environment\n      Environment:\n        Variables:\n          APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterReaderEndpoint}}\n          APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterWriterEndpoint}}\n          APP_DB_PROXY_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - AppDbProxyReaderEndpoint}}\n          APP_DB_PROXY_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - AppDbProxyWriterEndpoint}}\n          APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbAdminSecretArn}}\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n          PENDING_WRITES_DL_QUEUE_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PendingWritesDBDeadLetterQueueUrl}}\n          PENDING_WRITES_QUEUE_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PendingWritesDBQueueUrl}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'\n      Runtime: python3.9\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  ResetDemoEnvironmentLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - ResetDemoEnvironment\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'ResetDemoEnvironment'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  ResetDemoEnvironmentMethod:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W59\n            reason: This endpoint is being used to support an ephemeral demo environment that does not contain sensitive data.\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'ResetDemoEnvironment.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      OperationName: getResetDemoEnvironment\n      ResourceId: !Ref 'ResetDemoEnvironmentResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  ResetDemoEnvironmentMethodInvocationPermission:\n    DependsOn:\n      - ResetDemoEnvironment\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoAppApiId}}\n          - /*/\n          - GET\n          - /\n          - reset-demo-environment\n    Type: AWS::Lambda::Permission\n  ResetDemoEnvironmentResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: reset-demo-environment\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Resource\n  ResetDemoEnvironmentResourceOptionsMethod:\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'ResetDemoEnvironmentResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /DemoAppApiId}}\n    Type: AWS::ApiGateway::Method\n  ResetDemoEnvironmentRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - sqs:PurgeQueue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /PendingWritesDBQueueArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /PendingWritesDBDeadLetterQueueArn}}\n          PolicyName: purge-sqs-queues\n    Type: AWS::IAM::Role\n  TestTrafficTopic:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W47\n            reason: This resource supports an ephemeral demo environment and does not contain sensitive data.\n    Type: AWS::SNS::Topic\n  TestTrafficTopicPermission:\n    DependsOn:\n      - ClientEmulator\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'ClientEmulator'\n      Principal: sns.amazonaws.com\n      SourceAccount: !Ref 'AWS::AccountId'\n      SourceArn: !Ref 'TestTrafficTopic'\n    Type: AWS::Lambda::Permission\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DemoDashboardStackSet": {
   "Condition": "DeployDemoModules",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Demo-Dashboard",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       "us-east-1"
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Demo-Dashboard"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template deploys the demo CloudFront Distrubtion and dashboard\n  LastUpdated: November 30, 2023\n  Version: v1.6\nOutputs:\n  CloudFrontCdnWebsiteExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -DashboardWebsite\n    Value: !GetAtt 'Authentication.Outputs.WebsiteUrl'\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  Authentication:\n    Properties:\n      Location:\n        ApplicationId: arn:aws:serverlessrepo:us-east-1:520945424137:applications/cloudfront-authorization-at-edge\n        SemanticVersion: 2.1.8\n      Parameters:\n        CreateCloudFrontDistribution: true\n        DefaultRootObject: index.html\n        EmailAddress: !Ref 'DemoDashboardUserEmail'\n        HttpHeaders: >-\n          {\"Strict-Transport-Security\": \"max-age=31536000; includeSubdomains; preload\", \"Referrer-Policy\": \"same-origin\", \"X-XSS-Protection\": \"1; mode=block\", \"X-Frame-Options\": \"DENY\", \"X-Content-Type-Options\":\n          \"nosniff\"}\n    Type: AWS::Serverless::Application\n  DashboardCodeDeployer:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W89\n            reason: This function run once to set up the environment, and is invoked before the VPC is provisioned.\n          - id: W84\n            reason: These logs do not contain sensitive data.\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys,subprocess\\nsubprocess.call('pip install urllib3<2 cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\\nsys.path.insert(1,'/tmp/')\\n\\\n          import os,json,glob,boto3,shutil,urllib3,zipfile,mimetypes,cfnresponse\\nfrom collections import defaultdict\\nfrom botocore.exceptions import ClientError as boto3_client_error\\nhttp=urllib3.PoolManager()\\n\\\n          try:from urllib2 import HTTPError,build_opener,HTTPHandler,Request\\nexcept ImportError:from urllib.error import HTTPError;from urllib.request import build_opener,HTTPHandler,Request\\n'\\\\n    -\\\n          \\ CodeBucketName | str\\\\n    - CodeDownloadUrl | str\\\\n'\\ndef handler(event,context):\\n\\tT='VersionId';S='Key';R='RequestType';K='CodeBucketName';C=context;A=event;print(json.dumps(A));D=A['ResourceProperties']['Properties'];F=boto3.client('s3');E={}\\n\\\n          \\tif A[R]in['Create','Update']:\\n\\t\\tG='/tmp/demo_ui_code.zip';L=G.replace('.zip','');'\\\\n            Download the codebase\\\\n        ';U=urllib3.PoolManager();H=U.request('GET',D['CodeDownloadUrl'],preload_content=False,headers={'Cookie':'_gh_sess={};\\\n          \\ user_session={}'.format(os.environ['GITHUB_GH_SESSION_COOKIE'],os.environ['GITHUB_USER_SESSION_COOKIE'])})\\n\\t\\tif H.status!=200:print('Failed to Download Demo UI Code: HTTP Code '+str(H.status));return\\\n          \\ cfnresponse.send(A,C,cfnresponse.FAILED,E)\\n\\t\\twith H as V,open(G,'wb')as W:shutil.copyfileobj(V,W)\\n\\t\\t'\\\\n            Unzip the downloaded code\\\\n        '\\n\\t\\twith zipfile.ZipFile(G,'r')as\\\n          \\ X:X.extractall(L)\\n\\t\\tM='/demo/dashboard-ui/';'\\\\n            For each file in the local code directory\\\\n        '\\n\\t\\tfor B in glob.iglob(L+'**/**',recursive=True):\\n\\t\\t\\t\\\"\\\\n        \\\n          \\        If it's one of the dashboard files and it's a file, not a directory, we'll upload it to S3\\\\n            \\\"\\n\\t\\t\\tif M in B and os.path.isfile(B):\\n\\t\\t\\t\\ttry:Y=B.split(M)[1];F.upload_file(B,D[K],Y,ExtraArgs={'ContentType':mimetypes.guess_type(B)[0]})\\n\\\n          \\t\\t\\t\\texcept boto3_client_error as I:print('Failed to Upload Dashboard File: '+str(I));return cfnresponse.send(A,C,cfnresponse.FAILED,E)\\n\\telif A[R]in['Delete']:\\n\\t\\t\\\"\\\\n            Here,\\\n          \\ we'll delete all objects, versions, and delete markers from the bucket.\\\\n        \\\";Z=F.get_paginator('list_object_versions');J=[]\\n\\t\\tfor N in Z.paginate(Bucket=D[K]):\\n\\t\\t\\tfor O in['Versions','DeleteMarkers']:\\n\\\n          \\t\\t\\t\\tif O in N:\\n\\t\\t\\t\\t\\tfor P in N[O]:J.append({S:P[S],T:P[T]})\\n\\t\\tfor Q in range(0,len(J),1000):\\n\\t\\t\\ttry:a=F.delete_objects(Bucket=D[K],Delete={'Objects':J[Q:Q+1000],'Quiet':True})\\n\\\n          \\t\\t\\texcept boto3_client_error as I:print('Failed to Delete S3 Objects: '+str(I));return cfnresponse.send(A,C,cfnresponse.FAILED,E)\\n\\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,E)\"\n      Description: Downloads dashboard code from a remote repo and deploys it to Amazon S3\n      Environment:\n        Variables:\n          CODE_BUCKET_NAME: !GetAtt 'Authentication.Outputs.S3Bucket'\n          CODE_DOWNLOAD_URL: !Ref 'CodeDownloadUrl'\n          GITHUB_GH_SESSION_COOKIE: !Ref 'GitHubGhSessionValue'\n          GITHUB_USER_SESSION_COOKIE: !Ref 'GitHubUserSessionValue'\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'DashboardCodeDeployerRole.Arn'\n      Runtime: python3.9\n      Timeout: 30\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  DashboardCodeDeployerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - DashboardCodeDeployer\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DashboardCodeDeployer'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DashboardCodeDeployerResource:\n    DependsOn:\n      - Authentication\n      - DashboardCodeDeployer\n      - DashboardCodeDeployerLogGroup\n    Properties:\n      Properties:\n        CodeBucketName: !GetAtt 'Authentication.Outputs.S3Bucket'\n        CodeDownloadUrl: !Ref 'CodeDownloadUrl'\n        Version: '1.10'\n      ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'\n      Type: Custom::DeployDashboardCode\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  DashboardCodeDeployerRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - s3:PutObject\n                  - s3:ListBucket\n                  - s3:DeleteObject\n                  - s3:ListBucketVersions\n                  - s3:DeleteObjectVersion\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:aws:s3:::'\n                      - !GetAtt 'Authentication.Outputs.S3Bucket'\n                  - !Join\n                    - ''\n                    - - 'arn:aws:s3:::'\n                      - !GetAtt 'Authentication.Outputs.S3Bucket'\n                      - /*\n                Sid: PutS3Objects\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\nTransform: AWS::Serverless-2016-10-31\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "FailoverHandlersStackSet": {
   "Condition": "",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CoreAppStackSet",
    "DatabasesStackSet",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Failover-Handlers",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Failover-Handlers"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template deploys the handles that facilitate the demo failover tracking.\n  LastUpdated: November 30, 2023\n  Version: v1.6\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  FailoverCompletedEventListener:\n    DependsOn:\n      - FailoverCompletedHandler\n    Properties:\n      Description: Invokes Handler When Failover is Completed\n      EventPattern:\n        detail:\n          EventID:\n            - RDS-EVENT-0071\n          SourceArn:\n            - !Join\n              - ''\n              - - '{{resolve:ssm:/'\n                - !Ref 'MainStackName'\n                - /AppDbClusterArn}}\n        detail-type:\n          - RDS DB Cluster Event\n        source:\n          - aws.rds\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverCompletedHandler.Arn'\n          Id: FailoverCompletedHandler\n    Type: AWS::Events::Rule\n  FailoverCompletedHandler:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: These logs do not contain sensitive data.\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\n\\\n          import psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\nfrom datetime import timedelta\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\n\\\n          custom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\n    db_conn = psycopg2.connect(\\n        host = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n    \\n    '''\\n  \\\n          \\  curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (3,'\\\" + datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n\\\n          \\        \\n    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (4,'\\\" + datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n\\\n          \\    db_conn.commit()\\n    '''\\n    \\n    '''\\n        Logs Failover Completion\\n    '''\\n    curs = db_conn.cursor()\\n    \\n    curs.execute('''\\n        INSERT INTO failoverevents (event, insertedon)\\\n          \\ \\n            VALUES (3, %s)\\n    ''', (\\n        datetime.now().strftime(\\\"%m/%d/%Y %H:%M:%S\\\"), \\n    ))\\n    \\n    db_conn.commit()\\n        \\n    curs.close()\\n    db_conn.close()\\n    \\n\\\n          \\    return True\"\n      Description: Processes failover completed events\n      Environment:\n        Variables:\n          APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterIdentifier}}\n          APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterReaderEndpoint}}\n          APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterWriterEndpoint}}\n          APP_DB_PROXY_NAME: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - AppDbProxyName}}\n          APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbAdminSecretArn}}\n          DEMO_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterReaderEndpoint}}\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n          PUBLIC_APP_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /CoreAppUrl}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'FailoverCompletedHandlerRole.Arn'\n      Runtime: python3.9\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  FailoverCompletedHandlerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - FailoverCompletedHandler\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverCompletedHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverCompletedHandlerPermission:\n    DependsOn:\n      - FailoverCompletedHandler\n      - FailoverCompletedEventListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverCompletedHandler'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'FailoverCompletedEventListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverCompletedHandlerRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:RegisterDBProxyTargets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbProxyArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbClusterArn}}\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - rds\n                      - !Ref 'AWS::Region'\n                      - !Ref 'AWS::AccountId'\n                      - target-group\n                      - '*'\n                Sid: RegisterProxyTargets\n          PolicyName: register-proxy-targets\n    Type: AWS::IAM::Role\n  FailoverStartedEventListener:\n    DependsOn:\n      - FailoverStartedHandler\n    Properties:\n      Description: Invokes Handler When Failover is Started\n      EventPattern:\n        detail:\n          EventID:\n            - RDS-EVENT-0073\n          SourceArn:\n            - !Join\n              - ''\n              - - '{{resolve:ssm:/'\n                - !Ref 'MainStackName'\n                - /AppDbClusterArn}}\n        detail-type:\n          - RDS DB Cluster Event\n        source:\n          - aws.rds\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverStartedHandler.Arn'\n          Id: FailoverStartedHandler\n    Type: AWS::Events::Rule\n  FailoverStartedHandler:\n    DependsOn: []\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: These logs do not contain sensitive data.\n          - id: W92\n            reason: This function is used to support the demo environment and does not require provisioned concurrency.\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"# Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n# SPDX-License-Identifier: MIT-0\\n\\nimport sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\n\\\n          import psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\\n          \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\n    db_conn = psycopg2.connect(\\n        host\\\n          \\ = os.environ['DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n\\\n          \\        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n\\n    curs = db_conn.cursor()\\n    \\n    curs.execute('''\\n        INSERT\\\n          \\ INTO failoverevents (event, insertedon) \\n            VALUES (2, %s)\\n    ''', (\\n        datetime.datetime.now(),\\n    ))\\n    \\n    db_conn.commit()\\n    \\n    curs.close()\\n    db_conn.close()\\n\\\n          \\    \\n    return True\"\n      Description: Processes failover started events\n      Environment:\n        Variables:\n          APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterIdentifier}}\n          APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterReaderEndpoint}}\n          APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbClusterWriterEndpoint}}\n          APP_DB_PROXY_NAME: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - AppDbProxyName}}\n          APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /AppDbAdminSecretArn}}\n          DEMO_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterReaderEndpoint}}\n          DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbClusterWriterEndpoint}}\n          DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /DemoDbAdminSecretArn}}\n          PUBLIC_APP_URL: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /CoreAppUrl}}\n      Handler: index.handler\n      Layers:\n        - !Ref 'LambdaLayerArn'\n      MemorySize: 128\n      Role: !GetAtt 'FailoverStartedHandlerRole.Arn'\n      Runtime: python3.9\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  FailoverStartedHandlerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - FailoverStartedHandler\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W84\n            reason: This log group supports an ephemeral demo environment and does not contain sensitive data.\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverStartedHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverStartedHandlerPermission:\n    DependsOn:\n      - FailoverStartedHandler\n      - FailoverStartedEventListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverStartedHandler'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'FailoverStartedEventListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverStartedHandlerRole:\n    DependsOn: []\n    Metadata: {}\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /DemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /KmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:RegisterDBProxyTargets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbProxyArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /AppDbClusterArn}}\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - rds\n                      - !Ref 'AWS::Region'\n                      - !Ref 'AWS::AccountId'\n                      - target-group\n                      - '*'\n                Sid: RegisterProxyTargets\n          PolicyName: register-proxy-targets\n    Type: AWS::IAM::Role\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "LambdaLayerCreator": {
   "DependsOn": [],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W92",
       "reason": "This function is used to support the demo environment and does not require provisioned concurrency."
      },
      {
       "id": "W89",
       "reason": "This function run once to set up the environment, and is invoked before the VPC is provisioned."
      }
     ]
    }
   },
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "_A='%H:%M:%S'\nimport sys,subprocess\nsubprocess.call('pip install urllib3<2 cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\nsys.path.insert(1,'/tmp/')\nimport io,os,json,boto3,shutil,cfnresponse\nfrom zipfile import ZipFile\nfrom botocore.exceptions import ClientError as boto3_client_error\ndef zip_directory(path):\n\tfor(B,F,C)in os.walk(path):\n\t\tfor D in C:A=os.path.join(B,D);E=A[len(path)+len(os.sep):];yield(A,E)\ndef make_zip_file_bytes(path):\n\tA=io.BytesIO()\n\twith ZipFile(A,'w')as B:\n\t\tfor(C,D)in zip_directory(path=path):B.write(C,D)\n\treturn A.getvalue()\n'\\n    - Region | str\\n    - Packages | list\\n    - LayerName | str\\n'\ndef handler(event,context):\n\tJ='RequestType';I='ResourceProperties';G='LayerName';C=context;A=event;print(json.dumps(A));B=A[I]['Properties'];N=A[I]['Type'].replace('Custom::','');D={};K=boto3.Session(region_name=B['Region']);E=K.client('lambda')\n\tif A[J]in['Create','Update']:\n\t\tsubprocess.call(('pip install '+' '.join(B['Packages'])+' -t /tmp/lambda-layer --no-cache-dir').split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL);shutil.copyfile(os.path.realpath(__file__),'/tmp/lambda-layer/multi_region_db.py')\n\t\ttry:H=E.publish_layer_version(LayerName=B[G],Content={'ZipFile':make_zip_file_bytes('/tmp/lambda-layer')},CompatibleRuntimes=['python3.9'],CompatibleArchitectures=['x86_64','arm64']);return cfnresponse.send(A,C,cfnresponse.SUCCESS,D,H['LayerVersionArn'])\n\t\texcept boto3_client_error as F:print('Failed to Deploy Lambda Layer: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\tif A[J]in['Delete']:\n\t\ttry:\n\t\t\tL=E.list_layer_versions(LayerName=B[G])\n\t\t\tfor M in L['LayerVersions']:H=E.delete_layer_version(LayerName=B[G],VersionNumber=M['Version'])\n\t\texcept boto3_client_error as F:print('Failed to Delete Layer Versions: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\t\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,D)\nimport dateutil.tz\nfrom datetime import datetime\nfrom datetime import timedelta\nclass Functions:\n\tdef __init__(A):''\n\tdef add_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=5)).strftime(_A)\n\tdef subtract_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=-5)).strftime(_A)\n\tdef add_time(B,label,data):\n\t\tA=label;C=dateutil.tz.gettz('US/Pacific');D=datetime.now(tz=C)\n\t\twhile datetime.strptime(A[len(A)-1],_A)+timedelta(seconds=9)<datetime.strptime(D.strftime(_A),_A):A.pop(0);data.pop(0);A.append(B.add_five_seconds(A[len(A)-1]));data.append('0')\n\t'\\n        Requires \"(APP|DEMO)_DB_SECRET_ARN\" as an environment variable\\n        \\n        - db_identifier | str (App|Demo)\\n    '\n\tdef get_db_credentials(E,db_identifier):\n\t\tA=db_identifier;B=boto3.client('secretsmanager')\n\t\ttry:C=B.get_secret_value(SecretId=os.environ[A.upper()+'_DB_SECRET_ARN'])\n\t\texcept boto3_client_error as D:raise Exception('Failed to Retrieve '+A+' Database Secret: '+str(D))\n\t\telse:return json.loads(C['SecretString'])"
    },
    "Description": "",
    "Handler": "index.handler",
    "Layers": [],
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "LambdaLayerCreatorRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "PassThrough"
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "LambdaLayerCreatorLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "LambdaLayerCreator"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This log group supports an ephemeral demo environment and does not contain sensitive data."
      }
     ]
    }
   },
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "LambdaLayerCreator"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "LambdaLayerCreatorResource": {
   "DependsOn": [
    "LambdaLayerCreatorLogGroup"
   ],
   "Properties": {
    "Properties": {
     "LayerName": {
      "Ref": "AWS::StackName"
     },
     "Packages": [
      "requests",
      "cfnresponse",
      "psycopg2-binary"
     ],
     "Region": {
      "Ref": "AWS::Region"
     },
     "Version": 1.0
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "LambdaLayerCreator",
      "Arn"
     ]
    },
    "Type": "Custom::DeployLambdaLayer",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "LambdaLayerCreatorRole": {
   "DependsOn": [],
   "Metadata": {},
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "lambda:ListLayerVersions",
          "lambda:DeleteLayerVersion",
          "lambda:PublishLayerVersion"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "lambda",
             {
              "Ref": "AWS::Region"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "layer",
             {
              "Ref": "AWS::StackName"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            ":",
            [
             "arn",
             {
              "Ref": "AWS::Partition"
             },
             "lambda",
             {
              "Ref": "AWS::Region"
             },
             {
              "Ref": "AWS::AccountId"
             },
             "layer",
             {
              "Ref": "AWS::StackName"
             },
             "*"
            ]
           ]
          }
         ],
         "Sid": "CreateAndDeleteLambdaLayers"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "NetworkingStackSet": {
   "Condition": "",
   "DependsOn": [
    "RegionalWafAcl",
    "LambdaLayerCreatorResource",
    "StackSetExecutionRole",
    "StackSetAdministrationRole"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "0-RPO Aurora Demo - Networking",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 1,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "RegionalWafAclArn",
      "ParameterValue": {
       "Fn::GetAtt": [
        "RegionalWafAcl",
        "Arn"
       ]
      }
     },
     {
      "ParameterKey": "LambdaLayerArn",
      "ParameterValue": {
       "Ref": "LambdaLayerCreatorResource"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "VpcCidr",
      "ParameterValue": {
       "Ref": "VpcCidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "DeployDemoDashboard",
      "ParameterValue": {
       "Ref": "DeployDemoDashboard"
      }
     },
     {
      "ParameterKey": "DemoDashboardUserEmail",
      "ParameterValue": {
       "Ref": "DemoDashboardUserEmail"
      }
     },
     {
      "ParameterKey": "GitHubGhSessionValue",
      "ParameterValue": {
       "Ref": "GitHubGhSessionValue"
      }
     },
     {
      "ParameterKey": "GitHubUserSessionValue",
      "ParameterValue": {
       "Ref": "GitHubUserSessionValue"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "AWS::Region"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Networking"
      ]
     ]
    },
    "TemplateBody": "Metadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This template deploys the VPC and other networking resources required to host the application\n  LastUpdated: November 30, 2023\n  Version: v1.6\nOutputs:\n  LambdaSecurityGroupId:\n    Condition: ''\n    Value: !Ref 'LambdaSecurityGroup'\n  PrivateRouteTableZoneAId:\n    Condition: ''\n    Value: !Ref 'PrivateRouteTableZoneA'\n  PrivateRouteTableZoneBId:\n    Condition: ''\n    Value: !Ref 'PrivateRouteTableZoneB'\n  PrivateSubnetZoneAId:\n    Condition: ''\n    Value: !Ref 'PrivateSubnetZoneA'\n  PrivateSubnetZoneBId:\n    Condition: ''\n    Value: !Ref 'PrivateSubnetZoneB'\n  PublicSubnetZoneAId:\n    Condition: ''\n    Value: !Ref 'PublicSubnetZoneA'\n  PublicSubnetZoneBId:\n    Condition: ''\n    Value: !Ref 'PublicSubnetZoneB'\n  VpcId:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - VpcId\n    Value: !Ref 'Vpc'\nParameters:\n  CodeDownloadUrl:\n    Default: https://github.com/aws-solutions-library-samples/guidance-for-architecting-resilient-database-with-amazon-aurora-on-aws/archive/refs/heads/main.zip\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Default: AuroraAdmin\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  DemoDashboardUserEmail:\n    Description: The email address you'll use to log into the dashboard. This is required if \"Deploy Demo Dashboard\" is set to \"Yes\".\n    Type: String\n  DeployDemoDashboard:\n    AllowedValues:\n      - 'No'\n      - 'Yes'\n    Default: 'Yes'\n    Description: >-\n      Would you like a demo application deployed along side this solution that will allow you to test the failover? INFO: Because of WAF service requirements, demo WAF and CloudFront resources will be deployed\n      to us-east-1, regardless of which region you deploy this stack to.\n    Type: String\n  GitHubGhSessionValue:\n    Description: The value of your GitHub \"_gh_sess\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  GitHubUserSessionValue:\n    Description: The value of your GitHub \"user_session\" cookie. This parameter will be removed when the solution's GitHub repo is made public.\n    Type: String\n  LambdaLayerArn:\n    Type: String\n  MainStackName:\n    Type: String\n  PrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrivateSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PublicSubnetZoneBCidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  RegionalWafAclArn:\n    Type: String\n  VpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\nResources:\n  InternetGateway:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Ref 'AWS::StackName'\n    Type: AWS::EC2::InternetGateway\n  InternetGatewayVpcAssociation:\n    DependsOn:\n      - Vpc\n      - InternetGateway\n    Properties:\n      InternetGatewayId: !Ref 'InternetGateway'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::VPCGatewayAttachment\n  LambdaSecurityGroup:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W5\n            reason: Access to dynamic public IPs is required.\n    Properties:\n      GroupDescription: Lambda Security Group\n      SecurityGroupEgress:\n        - CidrIp: '0.0.0.0/0'\n          Description: All HTTPs Traffic\n          FromPort: 443\n          IpProtocol: tcp\n          ToPort: 443\n        - CidrIp: '0.0.0.0/0'\n          Description: Database Traffic\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n      SecurityGroupIngress: []\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::SecurityGroup\n  LambdaSecurityGroupIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Lambda Security Group ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - LambdaSecurityGroupId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'LambdaSecurityGroup'\n    Type: AWS::SSM::Parameter\n  NatGatewayZoneA:\n    DependsOn:\n      - PublicSubnetZoneA\n      - NatGatewayZoneAElasticIp\n    Properties:\n      AllocationId: !GetAtt 'NatGatewayZoneAElasticIp.AllocationId'\n      SubnetId: !Ref 'PublicSubnetZoneA'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - NatGatewayZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n    Type: AWS::EC2::NatGateway\n  NatGatewayZoneAElasticIp:\n    Properties:\n      Domain: vpc\n    Type: AWS::EC2::EIP\n  NatGatewayZoneB:\n    DependsOn:\n      - PublicSubnetZoneB\n      - NatGatewayZoneBElasticIp\n    Properties:\n      AllocationId: !GetAtt 'NatGatewayZoneBElasticIp.AllocationId'\n      SubnetId: !Ref 'PublicSubnetZoneB'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - NatGatewayZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n    Type: AWS::EC2::NatGateway\n  NatGatewayZoneBElasticIp:\n    Properties:\n      Domain: vpc\n    Type: AWS::EC2::EIP\n  PrivateRouteTableZoneA:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateRouteTableZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::RouteTable\n  PrivateRouteTableZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ID of Private Route Table in Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateRouteTableZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateRouteTableZoneA'\n    Type: AWS::SSM::Parameter\n  PrivateRouteTableZoneB:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateRouteTableZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::RouteTable\n  PrivateRouteTableZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ID of Private Route Table in Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateRouteTableZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateRouteTableZoneB'\n    Type: AWS::SSM::Parameter\n  PrivateSubnetRouteToNatGatewayZoneA:\n    DependsOn:\n      - NatGatewayZoneA\n      - PrivateRouteTableZoneA\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'NatGatewayZoneA'\n      RouteTableId: !Ref 'PrivateRouteTableZoneA'\n    Type: AWS::EC2::Route\n  PrivateSubnetRouteToNatGatewayZoneB:\n    DependsOn:\n      - NatGatewayZoneB\n      - PrivateRouteTableZoneB\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'NatGatewayZoneB'\n      RouteTableId: !Ref 'PrivateRouteTableZoneB'\n    Type: AWS::EC2::Route\n  PrivateSubnetZoneA:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !Ref 'PrivateSubnetZoneACidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateSubnetZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PrivateSubnetZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Private\n          - ' Subnet Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateSubnetZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateSubnetZoneA'\n    Type: AWS::SSM::Parameter\n  PrivateSubnetZoneATableAssociation:\n    DependsOn:\n      - Vpc\n      - PrivateSubnetZoneA\n      - PrivateRouteTableZoneA\n    Properties:\n      RouteTableId: !Ref 'PrivateRouteTableZoneA'\n      SubnetId: !Ref 'PrivateSubnetZoneA'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PrivateSubnetZoneB:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !Ref 'PrivateSubnetZoneBCidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateSubnetZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PrivateSubnetZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Private\n          - ' Subnet Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateSubnetZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateSubnetZoneB'\n    Type: AWS::SSM::Parameter\n  PrivateSubnetZoneBTableAssociation:\n    DependsOn:\n      - Vpc\n      - PrivateSubnetZoneB\n      - PrivateRouteTableZoneB\n    Properties:\n      RouteTableId: !Ref 'PrivateRouteTableZoneB'\n      SubnetId: !Ref 'PrivateSubnetZoneB'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicRouteTable:\n    DependsOn:\n      - Vpc\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicRouteTable-\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::RouteTable\n  PublicRouteToInternet:\n    DependsOn:\n      - InternetGateway\n      - PublicRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n      RouteTableId: !Ref 'PublicRouteTable'\n    Type: AWS::EC2::Route\n  PublicSubnetZoneA:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !Ref 'PublicSubnetZoneACidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicSubnetZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PublicSubnetZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Public\n          - ' Subnet Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PublicSubnetZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PublicSubnetZoneA'\n    Type: AWS::SSM::Parameter\n  PublicSubnetZoneATableAssociation:\n    DependsOn:\n      - Vpc\n      - PublicSubnetZoneA\n      - PublicRouteTable\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      SubnetId: !Ref 'PublicSubnetZoneA'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicSubnetZoneB:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !Ref 'PublicSubnetZoneBCidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicSubnetZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PublicSubnetZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Public\n          - ' Subnet Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PublicSubnetZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PublicSubnetZoneB'\n    Type: AWS::SSM::Parameter\n  PublicSubnetZoneBTableAssociation:\n    DependsOn:\n      - Vpc\n      - PublicSubnetZoneB\n      - PublicRouteTable\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      SubnetId: !Ref 'PublicSubnetZoneB'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  Vpc:\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n          - id: W60\n            reason: This VPC is being deployed to support an ephemeral demo environment that does not require VPC flow log analysis.\n    Properties:\n      CidrBlock: !Ref 'VpcCidr'\n      EnableDnsHostnames: true\n      EnableDnsSupport: true\n      Tags:\n        - Key: Name\n          Value: !Ref 'AWS::StackName'\n    Type: AWS::EC2::VPC\n  VpcIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'VPC for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - VpcId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'Vpc'\n    Type: AWS::SSM::Parameter\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "RegionalWafAcl": {
   "Properties": {
    "DefaultAction": {
     "Allow": {}
    },
    "Rules": [
     {
      "Name": "BlockBots",
      "OverrideAction": {
       "Count": {}
      },
      "Priority": 0,
      "Statement": {
       "ManagedRuleGroupStatement": {
        "Name": "AWSManagedRulesBotControlRuleSet",
        "VendorName": "AWS"
       }
      },
      "VisibilityConfig": {
       "CloudWatchMetricsEnabled": true,
       "MetricName": {
        "Fn::Join": [
         "",
         [
          {
           "Ref": "AWS::StackName"
          },
          "-WAF-Bot-Traffic"
         ]
        ]
       },
       "SampledRequestsEnabled": true
      }
     }
    ],
    "Scope": "REGIONAL",
    "VisibilityConfig": {
     "CloudWatchMetricsEnabled": true,
     "MetricName": {
      "Fn::Join": [
       "",
       [
        {
         "Ref": "AWS::StackName"
        },
        "-WAF"
       ]
      ]
     },
     "SampledRequestsEnabled": true
    }
   },
   "Type": "AWS::WAFv2::WebACL"
  },
  "StackSetAdministrationRole": {
   "DeletionPolicy": "Retain",
   "DependsOn": [
    "StackSetExecutionRole"
   ],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "cloudformation.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "sts:AssumeRole"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "StackSetExecutionRole",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "StackSetExecutionRole": {
   "DeletionPolicy": "Retain",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": [
         {
          "Ref": "AWS::AccountId"
         }
        ]
       }
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:*",
          "kms:*",
          "ec2:*",
          "rds:*",
          "ssm:*",
          "sqs:*",
          "sns:*",
          "iam:*",
          "logs:*",
          "wafv2:*",
          "events:*",
          "lambda:*",
          "cloudwatch:*",
          "cloudfront:*",
          "apigateway:*",
          "cognito-idp:*",
          "serverlessrepo:*",
          "cloudformation:*",
          "secretsmanager:*"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  }
 }
}